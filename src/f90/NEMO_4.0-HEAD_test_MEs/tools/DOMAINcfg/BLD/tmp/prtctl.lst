%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/prtctl.f90
Compiled : 04/29/22  10:44:31
Compiler : Version 8.3.4
Ftnlx    : Version 8318 (libcif 83016)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hstatic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -oprtctl.o
           -I/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HE
           AD_test_MEs/tools/DOMAINcfg/BLD/inc -sreal64 -sinteger32 -Ovector0
           -hfp0 -O0 -hflex_mp=intolerant -eCID
           -I/opt/cray/netcdf-hdf5parallel/4.3.2/CRAY/83/include
           -I/opt/cray/hdf5-parallel/1.8.13/CRAY/83/include
           -I/common/moci/modules/packages/XIOS/2.0/24708/952/inc
           -I/common/moci/modules/packages/oasis3-mct/2.0/24708/1765/build/lib/m
           ct
           -I/common/moci/modules/packages/oasis3-mct/2.0/24708/1765/build/lib/p
           smile.MPI1 -c -I/opt/cray/cce/8.3.4/craylibs/x86-64/include
           -I/opt/cray/netcdf-hdf5parallel/4.3.2/CRAY/83/include
           -I/opt/cray/hdf5-parallel/1.8.13/CRAY/83/include
           -I/opt/cray/libsci/13.0.1/CRAY/83/haswell/include
           -I/opt/cray/mpt/7.0.4/gni/mpich2-cray/83/include
           -I/opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I/opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I/opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I/opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I/opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I/opt/cray/pmi/5.0.5-1.0000.10300.134.8.ari/include
           -I/opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I/opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I/opt/cray/cce/8.3.4/craylibs/x86-64/pkgconfig/../include
           -I/opt/cray/cce/8.3.4/craylibs/x86-64/include
           -I/opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I/opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I/opt/cray-hss-devel/7.2.0/include /projects/jmmp/dbruciaf/NEMO/CHEC
           KOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/prt
           ctl.f90

ftnlx report
------------
Source   : /projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp//projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/prtctl.f90
Date     : 04/29/2022  10:44:32


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    MODULE prtctl
    2.       !!======================================================================
    3.       !!                       ***  MODULE prtctl   ***
    4.       !! Ocean system : print all SUM trends for each processor domain
    5.       !!======================================================================
    6.       !! History :  9.0  !  05-07  (C. Talandier) original code
    7.       !!            3.4  !  11-11  (C. Harris) decomposition changes for running with CICE
    8.       !!----------------------------------------------------------------------
    9.       USE dom_oce          ! ocean space and time domain variables
                 ^                                                        
ftn-1193 ftn: CAUTION PRTCTL, File = prtctl.f90, Line = 9, Column = 8 
  Module "PAR_KIND" is indirectly used in module "DOM_OCE" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/par_kind.o".  That file no
  longer exists.

                 ^                                                        
ftn-1193 ftn: CAUTION PRTCTL, File = prtctl.f90, Line = 9, Column = 8 
  Module "PAR_OCE" is indirectly used in module "DOM_OCE" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/par_oce.o".  That file no
  longer exists.

   10.    
   11.    
   12.    
   13.       USE in_out_manager   ! I/O manager
                 ^                              
ftn-1193 ftn: CAUTION PRTCTL, File = prtctl.f90, Line = 13, Column = 8 
  Module "NC4INTERFACE" is indirectly used in module "IN_OUT_MANAGER" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/nc4interface.o".  That file no
  longer exists.

   14.       USE lib_mpp          ! distributed memory computing
   15.       USE wrk_nemo         ! work arrays
   16.    
   17.       IMPLICIT NONE
   18.       PRIVATE
   19.    
   20.       INTEGER , DIMENSION(:), ALLOCATABLE, SAVE ::   numid
   21.       INTEGER , DIMENSION(:), ALLOCATABLE, SAVE ::   nlditl , nldjtl    ! first, last indoor index for each i-domain
   22.       INTEGER , DIMENSION(:), ALLOCATABLE, SAVE ::   nleitl , nlejtl    ! first, last indoor index for each j-domain
   23.       INTEGER , DIMENSION(:), ALLOCATABLE, SAVE ::   nimpptl, njmpptl   ! i-, j-indexes for each processor
   24.       INTEGER , DIMENSION(:), ALLOCATABLE, SAVE ::   nlcitl , nlcjtl    ! dimensions of every subdomain
   25.       INTEGER , DIMENSION(:), ALLOCATABLE, SAVE ::   ibonitl, ibonjtl   !
   26.    
   27.       REAL(wp), DIMENSION(:), ALLOCATABLE, SAVE ::   t_ctll , s_ctll    ! previous tracer trend values
   28.       REAL(wp), DIMENSION(:), ALLOCATABLE, SAVE ::   u_ctll , v_ctll    ! previous velocity trend values
   29.    
   30.       INTEGER ::   ktime   ! time step
   31.    
   32.       PUBLIC prt_ctl         ! called by all subroutines
   33.       PUBLIC prt_ctl_info    ! called by all subroutines
   34.       PUBLIC prt_ctl_init    ! called by opa.F90
   35.       PUBLIC sub_dom         ! called by opa.F90
   36.    
   37.       !!----------------------------------------------------------------------
   38.       !! NEMO/OCE 4.0 , NEMO Consortium (2018)
   39.       !! $Id: prtctl.F90 5025 2015-01-12 15:53:50Z timgraham $ 
   40.       !! Software governed by the CeCILL licence     (./LICENSE)
   41.       !!----------------------------------------------------------------------
   42.    CONTAINS
   43.    
   44.       SUBROUTINE prt_ctl (tab2d_1, tab3d_1, mask1, clinfo1, tab2d_2, tab3d_2,   &
   45.          &                                  mask2, clinfo2, ovlap, kdim, clinfo3 )
   46.          !!----------------------------------------------------------------------
   47.          !!                     ***  ROUTINE prt_ctl  ***
   48.          !!
   49.          !! ** Purpose : - print sum control of 2D or 3D arrays over the same area 
   50.          !!                in mono and mpp case. This way can be usefull when
   51.          !!                debugging a new parametrization in mono or mpp. 
   52.          !!
   53.          !! ** Method  : 2 possibilities exist when setting the ln_ctl parameter to
   54.          !!                .true. in the ocean namelist:
   55.          !!              - to debug a MPI run .vs. a mono-processor one; 
   56.          !!                the control print will be done over each sub-domain.
   57.          !!                The nictl[se] and njctl[se] parameters in the namelist must 
   58.          !!                be set to zero and [ij]splt to the corresponding splitted
   59.          !!                domain in MPI along respectively i-, j- directions.
   60.          !!              - to debug a mono-processor run over the whole domain/a specific area; 
   61.          !!                in the first case the nictl[se] and njctl[se] parameters must be set
   62.          !!                to zero else to the indices of the area to be controled. In both cases
   63.          !!                isplt and jsplt must be set to 1.
   64.          !!              - All arguments of the above calling sequence are optional so their
   65.          !!                name must be explicitly typed if used. For instance if the 3D
   66.          !!                array tn(:,:,:) must be passed through the prt_ctl subroutine, 
   67.          !!                it must looks like: CALL prt_ctl(tab3d_1=tn).
   68.          !!
   69.          !!                    tab2d_1 : first 2D array
   70.          !!                    tab3d_1 : first 3D array
   71.          !!                    mask1   : mask (3D) to apply to the tab[23]d_1 array
   72.          !!                    clinfo1 : information about the tab[23]d_1 array
   73.          !!                    tab2d_2 : second 2D array
   74.          !!                    tab3d_2 : second 3D array
   75.          !!                    mask2   : mask (3D) to apply to the tab[23]d_2 array
   76.          !!                    clinfo2 : information about the tab[23]d_2 array
   77.          !!                    ovlap   : overlap value
   78.          !!                    kdim    : k- direction for 3D arrays 
   79.          !!                    clinfo3 : additional information 
   80.          !!----------------------------------------------------------------------
   81.          REAL(wp), DIMENSION(:,:)  , INTENT(in), OPTIONAL ::   tab2d_1
   82.          REAL(wp), DIMENSION(:,:,:), INTENT(in), OPTIONAL ::   tab3d_1
   83.          REAL(wp), DIMENSION(:,:,:), INTENT(in), OPTIONAL ::   mask1
   84.          CHARACTER (len=*)         , INTENT(in), OPTIONAL ::   clinfo1
   85.          REAL(wp), DIMENSION(:,:)  , INTENT(in), OPTIONAL ::   tab2d_2
   86.          REAL(wp), DIMENSION(:,:,:), INTENT(in), OPTIONAL ::   tab3d_2
   87.          REAL(wp), DIMENSION(:,:,:), INTENT(in), OPTIONAL ::   mask2
   88.          CHARACTER (len=*)         , INTENT(in), OPTIONAL ::   clinfo2
   89.          INTEGER                   , INTENT(in), OPTIONAL ::   ovlap
   90.          INTEGER                   , INTENT(in), OPTIONAL ::   kdim
   91.          CHARACTER (len=*)         , INTENT(in), OPTIONAL ::   clinfo3
   92.          !
   93.          CHARACTER (len=15) :: cl2
   94.          INTEGER ::   overlap, jn, sind, eind, kdir,j_id
   95.          REAL(wp) :: zsum1, zsum2, zvctl1, zvctl2
   96.          REAL(wp), POINTER, DIMENSION(:,:)   :: ztab2d_1, ztab2d_2
   97.          REAL(wp), POINTER, DIMENSION(:,:,:) :: zmask1, zmask2, ztab3d_1, ztab3d_2
   98.          !!----------------------------------------------------------------------
   99.    
  100.          CALL wrk_alloc( jpi,jpj, ztab2d_1, ztab2d_2 )
  101.          CALL wrk_alloc( jpi,jpj,jpk, zmask1, zmask2, ztab3d_1, ztab3d_2 )
  102.    
  103.          ! Arrays, scalars initialization 
  104.          overlap   = 0
  105.          kdir      = jpkm1
  106.          cl2       = ''
  107.          zsum1     = 0.e0
  108.          zsum2     = 0.e0
  109.          zvctl1    = 0.e0
  110.          zvctl2    = 0.e0
  111.          ztab2d_1(:,:)   = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 111 
  A loop starting at line 111 was not vectorized because it contains a reference to a non-vector intrinsic on line 111.

  112.          ztab2d_2(:,:)   = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 112 
  A loop starting at line 112 was not vectorized because it contains a reference to a non-vector intrinsic on line 112.

  113.          ztab3d_1(:,:,:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 113 
  A loop starting at line 113 was not vectorized because it contains a reference to a non-vector intrinsic on line 113.

  114.          ztab3d_2(:,:,:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 114 
  A loop starting at line 114 was not vectorized because it contains a reference to a non-vector intrinsic on line 114.

  115.          zmask1  (:,:,:) = 1.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 115 
  A loop starting at line 115 was not vectorized because it contains a reference to a non-vector intrinsic on line 115.

  116.          zmask2  (:,:,:) = 1.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 116 
  A loop starting at line 116 was not vectorized because it contains a reference to a non-vector intrinsic on line 116.

  117.    
  118.          ! Control of optional arguments
  119.          IF( PRESENT(clinfo2) )   cl2                  = clinfo2
  120.          IF( PRESENT(ovlap)   )   overlap              = ovlap
  121.          IF( PRESENT(kdim)    )   kdir                 = kdim
  122.          IF( PRESENT(tab2d_1) )   ztab2d_1(:,:)        = tab2d_1(:,:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 122 
  A loop starting at line 122 was not vectorized because it contains a call to a subroutine or function on line 122.

  123.          IF( PRESENT(tab2d_2) )   ztab2d_2(:,:)        = tab2d_2(:,:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 123 
  A loop starting at line 123 was not vectorized because it contains a call to a subroutine or function on line 123.

  124.          IF( PRESENT(tab3d_1) )   ztab3d_1(:,:,1:kdir) = tab3d_1(:,:,1:kdir)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 124 
  A loop starting at line 124 was not vectorized because it contains a call to a subroutine or function on line 124.

  125.          IF( PRESENT(tab3d_2) )   ztab3d_2(:,:,1:kdir) = tab3d_2(:,:,1:kdir)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 125 
  A loop starting at line 125 was not vectorized because it contains a call to a subroutine or function on line 125.

  126.          IF( PRESENT(mask1)   )   zmask1  (:,:,:)      = mask1  (:,:,:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 126 
  A loop starting at line 126 was not vectorized because it contains a call to a subroutine or function on line 126.

  127.          IF( PRESENT(mask2)   )   zmask2  (:,:,:)      = mask2  (:,:,:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 127 
  A loop starting at line 127 was not vectorized because it contains a call to a subroutine or function on line 127.

  128.    
  129.          IF( lk_mpp .AND. jpnij > 1 ) THEN       ! processor number
  130.             sind = narea
  131.             eind = narea
  132.          ELSE                                    ! processors total number
  133.             sind = 1
  134.             eind = ijsplt
  135.          ENDIF
  136.    
  137.          ! Loop over each sub-domain, i.e. the total number of processors ijsplt
  138.          DO jn = sind, eind
  139.             ! Set logical unit
  140.             j_id = numid(jn - narea + 1)
  141.             ! Set indices for the SUM control
  142.             IF( .NOT. lsp_area ) THEN
  143.                IF (lk_mpp .AND. jpnij > 1)   THEN
  144.                   nictls = MAX( 1, nlditl(jn) - overlap )
  145.                   nictle = nleitl(jn) + overlap * MIN( 1, nlcitl(jn) - nleitl(jn)) 
  146.                   njctls = MAX( 1, nldjtl(jn) - overlap )
  147.                   njctle = nlejtl(jn) + overlap * MIN( 1, nlcjtl(jn) - nlejtl(jn))
  148.                   ! Do not take into account the bound of the domain
  149.                   IF( ibonitl(jn) == -1 .OR. ibonitl(jn) == 2 ) nictls = MAX(2, nictls)
  150.                   IF( ibonjtl(jn) == -1 .OR. ibonjtl(jn) == 2 ) njctls = MAX(2, njctls)
  151.                   IF( ibonitl(jn) ==  1 .OR. ibonitl(jn) == 2 ) nictle = MIN(nictle, nleitl(jn) - 1)
  152.                   IF( ibonjtl(jn) ==  1 .OR. ibonjtl(jn) == 2 ) njctle = MIN(njctle, nlejtl(jn) - 1)
  153.                ELSE
  154.                   nictls = MAX( 1, nimpptl(jn) + nlditl(jn) - 1 - overlap )
  155.                   nictle = nimpptl(jn) + nleitl(jn) - 1 + overlap * MIN( 1, nlcitl(jn) - nleitl(jn) ) 
  156.                   njctls = MAX( 1, njmpptl(jn) + nldjtl(jn) - 1 - overlap )
  157.                   njctle = njmpptl(jn) + nlejtl(jn) - 1 + overlap * MIN( 1, nlcjtl(jn) - nlejtl(jn) ) 
  158.                   ! Do not take into account the bound of the domain
  159.                   IF( ibonitl(jn) == -1 .OR. ibonitl(jn) == 2 ) nictls = MAX(2, nictls)
  160.                   IF( ibonjtl(jn) == -1 .OR. ibonjtl(jn) == 2 ) njctls = MAX(2, njctls)
  161.                   IF( ibonitl(jn) ==  1 .OR. ibonitl(jn) == 2 ) nictle = MIN(nictle, nimpptl(jn) + nleitl(jn) - 2)
  162.                   IF( ibonjtl(jn) ==  1 .OR. ibonjtl(jn) == 2 ) njctle = MIN(njctle, njmpptl(jn) + nlejtl(jn) - 2)
  163.                ENDIF
  164.             ENDIF
  165.    
  166.             IF( PRESENT(clinfo3)) THEN
  167.                IF ( clinfo3 == 'tra' )  THEN
  168.                   zvctl1 = t_ctll(jn)
  169.                   zvctl2 = s_ctll(jn)
  170.                ELSEIF ( clinfo3 == 'dyn' )   THEN
  171.                   zvctl1 = u_ctll(jn)
  172.                   zvctl2 = v_ctll(jn)
  173.                ENDIF
  174.             ENDIF
  175.    
  176.             ! Compute the sum control
  177.             ! 2D arrays
  178.             IF( PRESENT(tab2d_1) )   THEN
  179.                zsum1 = SUM( ztab2d_1(nictls:nictle,njctls:njctle)*zmask1(nictls:nictle,njctls:njctle,1) )
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 179 
  A loop starting at line 179 was not vectorized because it contains a reference to a non-vector intrinsic on line 179.

  180.                zsum2 = SUM( ztab2d_2(nictls:nictle,njctls:njctle)*zmask2(nictls:nictle,njctls:njctle,1) )
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 180 
  A loop starting at line 180 was not vectorized because it contains a reference to a non-vector intrinsic on line 180.

  181.             ENDIF
  182.    
  183.             ! 3D arrays
  184.             IF( PRESENT(tab3d_1) )   THEN
  185.                zsum1 = SUM( ztab3d_1(nictls:nictle,njctls:njctle,1:kdir)*zmask1(nictls:nictle,njctls:njctle,1:kdir) )
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 185 
  A loop starting at line 185 was not vectorized because it contains a reference to a non-vector intrinsic on line 185.

  186.                zsum2 = SUM( ztab3d_2(nictls:nictle,njctls:njctle,1:kdir)*zmask2(nictls:nictle,njctls:njctle,1:kdir) )
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 186 
  A loop starting at line 186 was not vectorized because it contains a reference to a non-vector intrinsic on line 186.

  187.             ENDIF
  188.    
  189.             ! Print the result
  190.             IF( PRESENT(clinfo3) )   THEN
  191.                WRITE(j_id,FMT='(a,D23.16,3x,a,D23.16)')clinfo1, zsum1-zvctl1, cl2, zsum2-zvctl2
  192.                SELECT CASE( clinfo3 )
  193.                CASE ( 'tra-ta' ) 
  194.                   t_ctll(jn) = zsum1
  195.                CASE ( 'tra' ) 
  196.                    t_ctll(jn) = zsum1
  197.                    s_ctll(jn) = zsum2
  198.                CASE ( 'dyn' ) 
  199.                    u_ctll(jn) = zsum1
  200.                    v_ctll(jn) = zsum2 
  201.                END SELECT
  202.             ELSEIF ( PRESENT(clinfo2) .OR. PRESENT(tab2d_2) .OR. PRESENT(tab3d_2) )   THEN
  203.                WRITE(j_id,FMT='(a,D23.16,3x,a,D23.16)')clinfo1, zsum1, cl2, zsum2
  204.             ELSE
  205.                WRITE(j_id,FMT='(a,D23.16)')clinfo1, zsum1
  206.             ENDIF
  207.    
  208.          ENDDO
  209.    
  210.          CALL wrk_dealloc( jpi,jpj, ztab2d_1, ztab2d_2 )
  211.          CALL wrk_dealloc( jpi,jpj,jpk, zmask1, zmask2, ztab3d_1, ztab3d_2 )
  212.          !
  213.       END SUBROUTINE prt_ctl
  214.    
  215.    
  216.       SUBROUTINE prt_ctl_info (clinfo1, ivar1, clinfo2, ivar2, itime)
  217.          !!----------------------------------------------------------------------
  218.          !!                     ***  ROUTINE prt_ctl_info  ***
  219.          !!
  220.          !! ** Purpose : - print information without any computation
  221.          !!
  222.          !! ** Action  : - input arguments
  223.          !!                    clinfo1 : information about the ivar1
  224.          !!                    ivar1   : value to print
  225.          !!                    clinfo2 : information about the ivar2
  226.          !!                    ivar2   : value to print
  227.          !!----------------------------------------------------------------------
  228.          CHARACTER (len=*), INTENT(in)           ::   clinfo1
  229.          INTEGER          , INTENT(in), OPTIONAL ::   ivar1
  230.          CHARACTER (len=*), INTENT(in), OPTIONAL ::   clinfo2
  231.          INTEGER          , INTENT(in), OPTIONAL ::   ivar2
  232.          INTEGER          , INTENT(in), OPTIONAL ::   itime
  233.          !
  234.          INTEGER :: jn, sind, eind, iltime, j_id
  235.          !!----------------------------------------------------------------------
  236.    
  237.          IF( lk_mpp .AND. jpnij > 1 ) THEN       ! processor number
  238.             sind = narea
  239.             eind = narea
  240.          ELSE                                    ! total number of processors
  241.             sind = 1
  242.             eind = ijsplt
  243.          ENDIF
  244.    
  245.          ! Set to zero arrays at each new time step
  246.          IF( PRESENT(itime) )   THEN
  247.             iltime = itime
  248.             IF( iltime > ktime )   THEN
  249.                t_ctll(:) = 0.e0   ;   s_ctll(:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 249 
  A loop starting at line 249 was not vectorized because it contains a reference to a non-vector intrinsic on line 249.

  250.                u_ctll(:) = 0.e0   ;   v_ctll(:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 250 
  A loop starting at line 250 was not vectorized because it contains a reference to a non-vector intrinsic on line 250.

  251.                ktime = iltime
  252.             ENDIF
  253.          ENDIF
  254.    
  255.          ! Loop over each sub-domain, i.e. number of processors ijsplt
  256.          DO jn = sind, eind
  257.             !
  258.             j_id = numid(jn - narea + 1)         ! Set logical unit
  259.             !
  260.             IF( PRESENT(ivar1) .AND. PRESENT(clinfo2) .AND. PRESENT(ivar2) )   THEN
  261.                WRITE(j_id,*)clinfo1, ivar1, clinfo2, ivar2
  262.             ELSEIF ( PRESENT(ivar1) .AND. PRESENT(clinfo2) .AND. .NOT. PRESENT(ivar2) )   THEN
  263.                WRITE(j_id,*)clinfo1, ivar1, clinfo2
  264.             ELSEIF ( PRESENT(ivar1) .AND. .NOT. PRESENT(clinfo2) .AND. PRESENT(ivar2) )   THEN
  265.                WRITE(j_id,*)clinfo1, ivar1, ivar2
  266.             ELSEIF ( PRESENT(ivar1) .AND. .NOT. PRESENT(clinfo2) .AND. .NOT. PRESENT(ivar2) )   THEN
  267.                WRITE(j_id,*)clinfo1, ivar1
  268.             ELSE
  269.                WRITE(j_id,*)clinfo1
  270.             ENDIF
  271.             !
  272.          END DO
  273.          !
  274.       END SUBROUTINE prt_ctl_info
  275.    
  276.    
  277.       SUBROUTINE prt_ctl_init
  278.          !!----------------------------------------------------------------------
  279.          !!                     ***  ROUTINE prt_ctl_init  ***
  280.          !!
  281.          !! ** Purpose :   open ASCII files & compute indices
  282.          !!----------------------------------------------------------------------
  283.          INTEGER ::   jn, sind, eind, j_id
  284.          CHARACTER (len=28) :: clfile_out
  285.          CHARACTER (len=23) :: clb_name
  286.          CHARACTER (len=19) :: cl_run
  287.          !!----------------------------------------------------------------------
  288.    
  289.          ! Allocate arrays
  290.          ALLOCATE( nlditl(ijsplt) , nleitl(ijsplt) , nimpptl(ijsplt) , ibonitl(ijsplt) ,   &
  291.             &      nldjtl(ijsplt) , nlejtl(ijsplt) , njmpptl(ijsplt) , ibonjtl(ijsplt) ,   &
  292.             &      nlcitl(ijsplt) , t_ctll(ijsplt) , u_ctll (ijsplt) ,                     &
  293.             &      nlcjtl(ijsplt) , s_ctll(ijsplt) , v_ctll (ijsplt)                       )
  294.    
  295.          ! Initialization 
  296.          t_ctll(:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 296 
  A loop starting at line 296 was not vectorized because it contains a reference to a non-vector intrinsic on line 296.

  297.          s_ctll(:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 297 
  A loop starting at line 297 was not vectorized because it contains a reference to a non-vector intrinsic on line 297.

  298.          u_ctll(:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 298 
  A loop starting at line 298 was not vectorized because it contains a reference to a non-vector intrinsic on line 298.

  299.          v_ctll(:) = 0.e0
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 299 
  A loop starting at line 299 was not vectorized because it contains a reference to a non-vector intrinsic on line 299.

  300.          ktime = 1
  301.    
  302.          IF( lk_mpp .AND. jpnij > 1 ) THEN
  303.             sind = narea
  304.             eind = narea
  305.             clb_name = "('mpp.output_',I4.4)"
  306.             cl_run = 'MULTI processor run'
  307.             ! use indices for each area computed by mpp_init subroutine
  308.             nlditl(1:jpnij) = nldit(:) 
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 308 
  A loop starting at line 308 was not vectorized because it contains a call to a subroutine or function on line 308.

  309.             nleitl(1:jpnij) = nleit(:) 
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 309 
  A loop starting at line 309 was not vectorized because it contains a call to a subroutine or function on line 309.

  310.             nldjtl(1:jpnij) = nldjt(:) 
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 310 
  A loop starting at line 310 was not vectorized because it contains a call to a subroutine or function on line 310.

  311.             nlejtl(1:jpnij) = nlejt(:) 
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 311 
  A loop starting at line 311 was not vectorized because it contains a call to a subroutine or function on line 311.

  312.             !
  313.             nimpptl(1:jpnij) = nimppt(:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 313 
  A loop starting at line 313 was not vectorized because it contains a call to a subroutine or function on line 313.

  314.             njmpptl(1:jpnij) = njmppt(:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 314 
  A loop starting at line 314 was not vectorized because it contains a call to a subroutine or function on line 314.

  315.             !
  316.             nlcitl(1:jpnij) = nlcit(:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 316 
  A loop starting at line 316 was not vectorized because it contains a call to a subroutine or function on line 316.

  317.             nlcjtl(1:jpnij) = nlcjt(:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 317 
  A loop starting at line 317 was not vectorized because it contains a call to a subroutine or function on line 317.

  318.             !
  319.             ibonitl(1:jpnij) = ibonit(:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 319 
  A loop starting at line 319 was not vectorized because it contains a call to a subroutine or function on line 319.

  320.             ibonjtl(1:jpnij) = ibonjt(:)
ftn-6262 ftn: VECTOR File = prtctl.f90, Line = 320 
  A loop starting at line 320 was not vectorized because it contains a call to a subroutine or function on line 320.

  321.          ELSE
  322.             sind = 1
  323.             eind = ijsplt
  324.             clb_name = "('mono.output_',I4.4)"
  325.             cl_run = 'MONO processor run '
  326.             ! compute indices for each area as done in mpp_init subroutine
  327.             CALL sub_dom
  328.          ENDIF
  329.    
  330.          ALLOCATE( numid(eind-sind+1) )
  331.    
  332.          DO jn = sind, eind
  333.             WRITE(clfile_out,FMT=clb_name) jn-1
  334.             CALL ctl_opn( numid(jn -narea + 1), clfile_out, 'REPLACE', 'FORMATTED', 'SEQUENTIAL', 1, numout, .FALSE. )
  335.             j_id = numid(jn -narea + 1)
  336.             WRITE(j_id,*)
  337.             WRITE(j_id,*) '                 L O D Y C - I P S L'
  338.             WRITE(j_id,*) '                     O P A model'
  339.             WRITE(j_id,*) '            Ocean General Circulation Model'
  340.             WRITE(j_id,*) '               version OPA 9.0  (2005) '
  341.             WRITE(j_id,*)
  342.             WRITE(j_id,*) '                   PROC number: ', jn
  343.             WRITE(j_id,*)
  344.             WRITE(j_id,FMT="(19x,a20)")cl_run
  345.    
  346.             ! Print the SUM control indices
  347.             IF( .NOT. lsp_area )   THEN
  348.                nictls = nimpptl(jn) + nlditl(jn) - 1
  349.                nictle = nimpptl(jn) + nleitl(jn) - 1
  350.                njctls = njmpptl(jn) + nldjtl(jn) - 1
  351.                njctle = njmpptl(jn) + nlejtl(jn) - 1
  352.             ENDIF
  353.             WRITE(j_id,*) 
  354.             WRITE(j_id,*) 'prt_ctl :  Sum control indices'
  355.             WRITE(j_id,*) '~~~~~~~'
  356.             WRITE(j_id,*)
  357.             WRITE(j_id,9000)'                                nlej   = ', nlejtl(jn), '              '
  358.             WRITE(j_id,9000)'                  ------------- njctle = ', njctle, ' -------------'
  359.             WRITE(j_id,9001)'                  |                                       |'
  360.             WRITE(j_id,9001)'                  |                                       |'
  361.             WRITE(j_id,9001)'                  |                                       |'
  362.             WRITE(j_id,9002)'           nictls = ', nictls,  '                           nictle = ', nictle
  363.             WRITE(j_id,9002)'           nldi   = ', nlditl(jn),  '                           nlei   = ', nleitl(jn)
  364.             WRITE(j_id,9001)'                  |                                       |'
  365.             WRITE(j_id,9001)'                  |                                       |'
  366.             WRITE(j_id,9001)'                  |                                       |'
  367.             WRITE(j_id,9004)'  njmpp  = ',njmpptl(jn),'   ------------- njctls = ', njctls, ' -------------'
  368.             WRITE(j_id,9003)'           nimpp  = ', nimpptl(jn), '        nldj   = ', nldjtl(jn), '              '
  369.             WRITE(j_id,*)
  370.             WRITE(j_id,*)
  371.    
  372.    9000     FORMAT(a41,i4.4,a14)
  373.    9001     FORMAT(a59)
  374.    9002     FORMAT(a20,i4.4,a36,i3.3)
  375.    9003     FORMAT(a20,i4.4,a17,i4.4)
  376.    9004     FORMAT(a11,i4.4,a26,i4.4,a14)
  377.          END DO
  378.          !
  379.       END SUBROUTINE prt_ctl_init
  380.    
  381.    
  382.       SUBROUTINE sub_dom
  383.          !!----------------------------------------------------------------------
  384.          !!                  ***  ROUTINE sub_dom  ***
  385.          !!                    
  386.          !! ** Purpose :   Lay out the global domain over processors. 
  387.          !!                CAUTION: 
  388.          !!                This part has been extracted from the mpp_init
  389.          !!                subroutine and names of variables/arrays have been 
  390.          !!                slightly changed to avoid confusion but the computation
  391.          !!                is exactly the same. Any modification about indices of
  392.          !!                each sub-domain in the mppini.F90 module should be reported 
  393.          !!                here.
  394.          !!
  395.          !! ** Method  :   Global domain is distributed in smaller local domains.
  396.          !!                Periodic condition is a function of the local domain position
  397.          !!                (global boundary or neighbouring domain) and of the global
  398.          !!                periodic
  399.          !!                Type :         jperio global periodic condition
  400.          !!                               nperio local  periodic condition
  401.          !!
  402.          !! ** Action  : - set domain parameters
  403.          !!                    nimpp     : longitudinal index 
  404.          !!                    njmpp     : latitudinal  index
  405.          !!                    nperio    : lateral condition type 
  406.          !!                    narea     : number for local area
  407.          !!                    nlcil      : first dimension
  408.          !!                    nlcjl      : second dimension
  409.          !!                    nbondil    : mark for "east-west local boundary"
  410.          !!                    nbondjl    : mark for "north-south local boundary"
  411.          !!
  412.          !! History :
  413.          !!        !  94-11  (M. Guyon)  Original code
  414.          !!        !  95-04  (J. Escobar, M. Imbard)
  415.          !!        !  98-02  (M. Guyon)  FETI method
  416.          !!        !  98-05  (M. Imbard, J. Escobar, L. Colombet )  SHMEM and MPI versions
  417.          !!   8.5  !  02-08  (G. Madec)  F90 : free form
  418.          !!----------------------------------------------------------------------
  419.          INTEGER ::   ji, jj, jn               ! dummy loop indices
  420.          INTEGER ::   &
  421.             ii, ij,                         &  ! temporary integers
  422.             irestil, irestjl,               &  !    "          "
  423.             ijpi  , ijpj, nlcil,            &  ! temporary logical unit
  424.             nlcjl , nbondil, nbondjl,       &
  425.             nrecil, nrecjl, nldil, nleil, nldjl, nlejl
  426.    
  427.          INTEGER, POINTER, DIMENSION(:,:) ::   iimpptl, ijmpptl, ilcitl, ilcjtl   ! workspace
  428.          REAL(wp) ::   zidom, zjdom            ! temporary scalars
  429.          !!----------------------------------------------------------------------
  430.    
  431.          !
  432.          CALL wrk_alloc( isplt, jsplt, ilcitl, ilcjtl, iimpptl, ijmpptl )
  433.          !
  434.          !  1. Dimension arrays for subdomains
  435.          ! -----------------------------------
  436.          !  Computation of local domain sizes ilcitl() ilcjtl()
  437.          !  These dimensions depend on global sizes isplt,jsplt and jpiglo,jpjglo
  438.          !  The subdomains are squares leeser than or equal to the global
  439.          !  dimensions divided by the number of processors minus the overlap
  440.          !  array (cf. par_oce.F90).
  441.    
  442.    
  443.    
  444.    
  445.    
  446.          ijpi = ( jpiglo-2*jpreci + (isplt-1) ) / isplt + 2*jpreci
  447.          ijpj = ( jpjglo-2*jprecj + (jsplt-1) ) / jsplt + 2*jprecj
  448.    
  449.    
  450.    
  451.          nrecil  = 2 * jpreci
  452.          nrecjl  = 2 * jprecj
  453.          irestil = MOD( jpiglo - nrecil , isplt )
  454.          irestjl = MOD( jpjglo - nrecjl , jsplt )
  455.    
  456.          IF(  irestil == 0 )   irestil = isplt
  457.    
  458.          DO jj = 1, jsplt
  459.             DO ji = 1, irestil
  460.                ilcitl(ji,jj) = ijpi
  461.             END DO
  462.             DO ji = irestil+1, isplt
  463.                ilcitl(ji,jj) = ijpi -1
  464.             END DO
  465.          END DO
  466.    
  467.          
  468.          IF( irestjl == 0 )   irestjl = jsplt
  469.    
  470.          DO ji = 1, isplt
  471.             DO jj = 1, irestjl
  472.                ilcjtl(ji,jj) = ijpj
  473.             END DO
  474.             DO jj = irestjl+1, jsplt
  475.                ilcjtl(ji,jj) = ijpj -1
  476.             END DO
  477.          END DO
  478.    
  479.          zidom = nrecil
  480.          DO ji = 1, isplt
  481.             zidom = zidom + ilcitl(ji,1) - nrecil
  482.          END DO
  483.          IF(lwp) WRITE(numout,*)
  484.          IF(lwp) WRITE(numout,*)' sum ilcitl(i,1) = ', zidom, ' jpiglo = ', jpiglo
  485.          
  486.          zjdom = nrecjl
  487.          DO jj = 1, jsplt
  488.             zjdom = zjdom + ilcjtl(1,jj) - nrecjl
  489.          END DO
  490.          IF(lwp) WRITE(numout,*)' sum ilcitl(1,j) = ', zjdom, ' jpjglo = ', jpjglo
  491.          IF(lwp) WRITE(numout,*)
  492.          
  493.    
  494.          !  2. Index arrays for subdomains
  495.          ! -------------------------------
  496.    
  497.          iimpptl(:,:) = 1
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 497 
  A loop starting at line 497 was not vectorized because it contains a reference to a non-vector intrinsic on line 497.

  498.          ijmpptl(:,:) = 1
ftn-6263 ftn: VECTOR File = prtctl.f90, Line = 498 
  A loop starting at line 498 was not vectorized because it contains a reference to a non-vector intrinsic on line 498.

  499.          
  500.          IF( isplt > 1 ) THEN
  501.             DO jj = 1, jsplt
  502.                DO ji = 2, isplt
  503.                   iimpptl(ji,jj) = iimpptl(ji-1,jj) + ilcitl(ji-1,jj) - nrecil
  504.                END DO
  505.             END DO
  506.          ENDIF
  507.    
  508.          IF( jsplt > 1 ) THEN
  509.             DO jj = 2, jsplt
  510.                DO ji = 1, isplt
  511.                   ijmpptl(ji,jj) = ijmpptl(ji,jj-1)+ilcjtl(ji,jj-1)-nrecjl
  512.                END DO
  513.             END DO
  514.          ENDIF
  515.          
  516.          ! 3. Subdomain description
  517.          ! ------------------------
  518.    
  519.          DO jn = 1, ijsplt
  520.             ii = 1 + MOD( jn-1, isplt )
  521.             ij = 1 + (jn-1) / isplt
  522.             nimpptl(jn) = iimpptl(ii,ij)
  523.             njmpptl(jn) = ijmpptl(ii,ij)
  524.             nlcitl (jn) = ilcitl (ii,ij)     
  525.             nlcil       = nlcitl (jn)     
  526.             nlcjtl (jn) = ilcjtl (ii,ij)     
  527.             nlcjl       = nlcjtl (jn)
  528.             nbondjl = -1                                    ! general case
  529.             IF( jn   >  isplt          )   nbondjl = 0      ! first row of processor
  530.             IF( jn   >  (jsplt-1)*isplt )  nbondjl = 1     ! last  row of processor
  531.             IF( jsplt == 1             )   nbondjl = 2      ! one processor only in j-direction
  532.             ibonjtl(jn) = nbondjl
  533.             
  534.             nbondil = 0                                     ! 
  535.             IF( MOD( jn, isplt ) == 1 )   nbondil = -1      !
  536.             IF( MOD( jn, isplt ) == 0 )   nbondil =  1      !
  537.             IF( isplt            == 1 )   nbondil =  2      ! one processor only in i-direction
  538.             ibonitl(jn) = nbondil
  539.             
  540.             nldil =  1   + jpreci
  541.             nleil = nlcil - jpreci
  542.             IF( nbondil == -1 .OR. nbondil == 2 )   nldil = 1
  543.             IF( nbondil ==  1 .OR. nbondil == 2 )   nleil = nlcil
  544.             nldjl =  1   + jprecj
  545.             nlejl = nlcjl - jprecj
  546.             IF( nbondjl == -1 .OR. nbondjl == 2 )   nldjl = 1
  547.             IF( nbondjl ==  1 .OR. nbondjl == 2 )   nlejl = nlcjl
  548.             nlditl(jn) = nldil
  549.             nleitl(jn) = nleil
  550.             nldjtl(jn) = nldjl
  551.             nlejtl(jn) = nlejl
  552.          END DO
  553.          !
  554.          !
  555.          CALL wrk_dealloc( isplt, jsplt, ilcitl, ilcjtl, iimpptl, ijmpptl )
  556.          !
  557.          !
  558.       END SUBROUTINE sub_dom
  559.    
  560.       !!======================================================================
  561.    END MODULE prtctl


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
AGRIF_CFIXED in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
AGRIF_ROOT in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_NAM in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_OPN in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL_INIT in PRTCTL (Line 334, file prtctl.f90)

Name  Messages
----  --------
CTL_STOP in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_WARN in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DOM_OCE
      Defined as:  No definitions.

      Used By:     PRTCTL  (indirectly)

Name  Messages
----  --------
DOM_OCE_ALLOC in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GET_NF90_SYMBOL in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GET_UNIT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IN_OUT_MANAGER
      Defined as:  No definitions.

      Used By:     PRTCTL

Name  Messages
----  --------
LIB_MPP
      Defined as:  No definitions.

      Used By:     PRTCTL

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 144, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 146, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 149, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 150, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 154, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 156, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 159, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 160, file prtctl.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 145, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 147, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 151, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 152, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 155, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 157, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 161, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 162, file prtctl.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SUB_DOM in PRTCTL (Line 453, file prtctl.f90)
                   SUB_DOM in PRTCTL (Line 454, file prtctl.f90)
                   SUB_DOM in PRTCTL (Line 520, file prtctl.f90)
                   SUB_DOM in PRTCTL (Line 535, file prtctl.f90)
                   SUB_DOM in PRTCTL (Line 536, file prtctl.f90)

Name  Messages
----  --------
MPPBCAST_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPGATHER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_REAL_MULTIPLE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPRECV in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSCATTER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSEND in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSTOP in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_REALDD in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_REALDD in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSYNC in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_COMM_FREE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_ICE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_NORTH in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_ZNL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_E in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_ICB in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_9 in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_E in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_ICB in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_MULTIPLE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_3D_GATHER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_BDY_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_BDY_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_SUM_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_SUM_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MAXLOC2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MAXLOC3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MINLOC2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MINLOC3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MYNODE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NC4INTERFACE
      Defined as:  No definitions.

      Used By:     PRTCTL  (indirectly)

Name  Messages
----  --------
PAR_KIND
      Defined as:  No definitions.

      Used By:     PRTCTL  (indirectly)
                   PRTCTL  (indirectly)

Name  Messages
----  --------
PAR_OCE
      Defined as:  No definitions.

      Used By:     PRTCTL  (indirectly)
                   PRTCTL  (indirectly)
                   PRTCTL  (indirectly)

Name  Messages
----  --------
PRESENT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 119, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 120, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 121, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 122, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 123, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 124, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 125, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 126, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 127, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 166, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 178, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 184, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 190, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 202, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 202, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 202, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 246, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 260, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 260, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 260, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 262, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 262, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 262, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 264, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 264, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 264, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 266, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 266, file prtctl.f90)
                   PRT_CTL_INFO in PRTCTL (Line 266, file prtctl.f90)

Name  Messages
----  --------
PRTCTL
      Defined as:  Module (line 1, file prtctl.f90)

        Uses:      PAR_KIND  (indirectly)
                   PAR_OCE  (indirectly)
                   IN_OUT_MANAGER
                   PAR_KIND  (indirectly)
                   NC4INTERFACE  (indirectly)
                   PAR_OCE  (indirectly)
                   LIB_MPP
                   PAR_OCE  (indirectly)
                   DOM_OCE  (indirectly)
                   WRK_NEMO

Name  Messages
----  --------
PRT_CTL in PRTCTL
      Defined as:  Subroutine (line 32, file prtctl.f90)

      Interface:   None

      Calls:       WRK_ALLOC_2DR in WRK_NEMO (Line 100, file prtctl.f90)
                   WRK_ALLOC_3DR in WRK_NEMO (Line 101, file prtctl.f90)
                   WRK_DEALLOC_2DR in WRK_NEMO (Line 210, file prtctl.f90)
                   WRK_DEALLOC_3DR in WRK_NEMO (Line 211, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 119, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 120, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 121, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 122, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 123, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 124, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 125, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 126, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 127, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 166, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 178, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 184, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 190, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 202, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 202, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 202, file prtctl.f90)
                   MAX(Intrinsic) (Line 144, file prtctl.f90)
                   MAX(Intrinsic) (Line 146, file prtctl.f90)
                   MAX(Intrinsic) (Line 149, file prtctl.f90)
                   MAX(Intrinsic) (Line 150, file prtctl.f90)
                   MAX(Intrinsic) (Line 154, file prtctl.f90)
                   MAX(Intrinsic) (Line 156, file prtctl.f90)
                   MAX(Intrinsic) (Line 159, file prtctl.f90)
                   MAX(Intrinsic) (Line 160, file prtctl.f90)
                   MIN(Intrinsic) (Line 145, file prtctl.f90)
                   MIN(Intrinsic) (Line 147, file prtctl.f90)
                   MIN(Intrinsic) (Line 151, file prtctl.f90)
                   MIN(Intrinsic) (Line 152, file prtctl.f90)
                   MIN(Intrinsic) (Line 155, file prtctl.f90)
                   MIN(Intrinsic) (Line 157, file prtctl.f90)
                   MIN(Intrinsic) (Line 161, file prtctl.f90)
                   MIN(Intrinsic) (Line 162, file prtctl.f90)
                   SUM(Intrinsic) (Line 179, file prtctl.f90)
                   SUM(Intrinsic) (Line 180, file prtctl.f90)
                   SUM(Intrinsic) (Line 185, file prtctl.f90)
                   SUM(Intrinsic) (Line 186, file prtctl.f90)

Name  Messages
----  --------
PRT_CTL_INFO in PRTCTL
      Defined as:  Subroutine (line 33, file prtctl.f90)

      Interface:   None

      Calls:       PRESENT(Intrinsic) (Line 246, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 260, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 260, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 260, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 262, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 262, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 262, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 264, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 264, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 264, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 266, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 266, file prtctl.f90)
                   PRESENT(Intrinsic) (Line 266, file prtctl.f90)

Name  Messages
----  --------
PRT_CTL_INIT in PRTCTL
      Defined as:  Subroutine (line 34, file prtctl.f90)

      Interface:   None

      Calls:       SUB_DOM in PRTCTL (Line 327, file prtctl.f90)
                   CTL_OPN in LIB_MPP (Line 334, file prtctl.f90)

Name  Messages
----  --------
SET_NF90_DEF_VAR_CHUNKING in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SET_NF90_DEF_VAR_DEFLATE in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SUB_DOM in PRTCTL
      Defined as:  Subroutine (line 35, file prtctl.f90)

      Interface:   None

      Called By:   PRT_CTL_INIT in PRTCTL (Line 327, file prtctl.f90)

      Calls:       WRK_ALLOC_2DI in WRK_NEMO (Line 432, file prtctl.f90)
                   WRK_DEALLOC_2DI in WRK_NEMO (Line 555, file prtctl.f90)
                   MOD(Intrinsic) (Line 453, file prtctl.f90)
                   MOD(Intrinsic) (Line 454, file prtctl.f90)
                   MOD(Intrinsic) (Line 520, file prtctl.f90)
                   MOD(Intrinsic) (Line 535, file prtctl.f90)
                   MOD(Intrinsic) (Line 536, file prtctl.f90)

Name  Messages
----  --------
SUM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 179, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 180, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 185, file prtctl.f90)
                   PRT_CTL in PRTCTL (Line 186, file prtctl.f90)

Name  Messages
----  --------
WRK_ALLOC_1DI in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_ALLOC_1DR in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_ALLOC_2DI in WRK_NEMO
      Defined as:  No definitions.

      Interface:   None

      Called By:   SUB_DOM in PRTCTL (Line 432, file prtctl.f90)

Name  Messages
----  --------
WRK_ALLOC_2DR in WRK_NEMO
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 100, file prtctl.f90)

Name  Messages
----  --------
WRK_ALLOC_3DI in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_ALLOC_3DR in WRK_NEMO
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 101, file prtctl.f90)

Name  Messages
----  --------
WRK_ALLOC_4DI in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_ALLOC_4DR in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_DEALLOC_1DI in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_DEALLOC_1DR in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_DEALLOC_2DI in WRK_NEMO
      Defined as:  No definitions.

      Interface:   None

      Called By:   SUB_DOM in PRTCTL (Line 555, file prtctl.f90)

Name  Messages
----  --------
WRK_DEALLOC_2DR in WRK_NEMO
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 210, file prtctl.f90)

Name  Messages
----  --------
WRK_DEALLOC_3DI in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_DEALLOC_3DR in WRK_NEMO
      Defined as:  No definitions.

      Interface:   None

      Called By:   PRT_CTL in PRTCTL (Line 211, file prtctl.f90)

Name  Messages
----  --------
WRK_DEALLOC_4DI in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_DEALLOC_4DR in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_LIST in WRK_NEMO
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRK_NEMO
      Defined as:  No definitions.

      Used By:     PRTCTL


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
