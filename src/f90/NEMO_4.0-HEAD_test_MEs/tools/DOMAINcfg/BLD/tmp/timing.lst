%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/timing.f90
Compiled : 04/29/22  10:43:18
Compiler : Version 8.3.4
Ftnlx    : Version 8318 (libcif 83016)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hstatic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -otiming.o
           -I/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HE
           AD_test_MEs/tools/DOMAINcfg/BLD/inc -sreal64 -sinteger32 -Ovector0
           -hfp0 -O0 -hflex_mp=intolerant -eCID
           -I/opt/cray/netcdf-hdf5parallel/4.3.2/CRAY/83/include
           -I/opt/cray/hdf5-parallel/1.8.13/CRAY/83/include
           -I/common/moci/modules/packages/XIOS/2.0/24708/952/inc
           -I/common/moci/modules/packages/oasis3-mct/2.0/24708/1765/build/lib/m
           ct
           -I/common/moci/modules/packages/oasis3-mct/2.0/24708/1765/build/lib/p
           smile.MPI1 -c -I/opt/cray/cce/8.3.4/craylibs/x86-64/include
           -I/opt/cray/netcdf-hdf5parallel/4.3.2/CRAY/83/include
           -I/opt/cray/hdf5-parallel/1.8.13/CRAY/83/include
           -I/opt/cray/libsci/13.0.1/CRAY/83/haswell/include
           -I/opt/cray/mpt/7.0.4/gni/mpich2-cray/83/include
           -I/opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I/opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I/opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I/opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I/opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I/opt/cray/pmi/5.0.5-1.0000.10300.134.8.ari/include
           -I/opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I/opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I/opt/cray/cce/8.3.4/craylibs/x86-64/pkgconfig/../include
           -I/opt/cray/cce/8.3.4/craylibs/x86-64/include
           -I/opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I/opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I/opt/cray-hss-devel/7.2.0/include /projects/jmmp/dbruciaf/NEMO/CHEC
           KOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/tim
           ing.f90

ftnlx report
------------
Source   : /projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp//projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/timing.f90
Date     : 04/29/2022  10:43:19


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    MODULE timing
    2.       !!========================================================================
    3.       !!                     ***  MODULE  timing  ***
    4.       !!========================================================================
    5.       !! History : 4.0  ! 2001-05  (R. Benshila)   
    6.       !!------------------------------------------------------------------------
    7.    
    8.       !!------------------------------------------------------------------------
    9.       !!   timming_init    : initialize timing process 
   10.       !!   timing_start    : start Timer
   11.       !!   timing_stop     : stop  Timer
   12.       !!   timing_reset    : end timing variable creation
   13.       !!   timing_finalize : compute stats and write output in calling w*_info 
   14.       !!   timing_ini_var  : create timing variables 
   15.       !!   timing_listing  : print instumented subroutines in ocean.output
   16.       !!   wcurrent_info   : compute and print detailed stats on the current CPU
   17.       !!   wave_info       : compute and print averaged statson all processors
   18.       !!   wmpi_info       : compute and write global stats  
   19.       !!   supress         : suppress an element of the timing linked list  
   20.       !!   insert          : insert an element of the timing linked list  
   21.       !!------------------------------------------------------------------------
   22.       USE in_out_manager  ! I/O manager 
                 ^                              
ftn-1193 ftn: CAUTION TIMING, File = timing.f90, Line = 22, Column = 8 
  Module "PAR_KIND" is indirectly used in module "IN_OUT_MANAGER" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/par_kind.o".  That file no
  longer exists.

                 ^                              
ftn-1193 ftn: CAUTION TIMING, File = timing.f90, Line = 22, Column = 8 
  Module "NC4INTERFACE" is indirectly used in module "IN_OUT_MANAGER" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/nc4interface.o".  That file no
  longer exists.

                 ^                              
ftn-1193 ftn: CAUTION TIMING, File = timing.f90, Line = 22, Column = 8 
  Module "PAR_OCE" is indirectly used in module "IN_OUT_MANAGER" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/par_oce.o".  That file no
  longer exists.

   23.       USE dom_oce         ! ocean domain
   24.       USE lib_mpp          
   25.       
   26.       IMPLICIT NONE
   27.       PRIVATE
   28.    
   29.       PUBLIC   timing_init, timing_finalize   ! called in nemogcm module 
   30.       PUBLIC   timing_reset                   ! called in step module 
   31.       PUBLIC   timing_start, timing_stop      ! called in each routine to time 
   32.       
   33.    
   34.       INCLUDE 'mpif.h'
   35.    
   36.    
   37.       ! Variables for fine grain timing
   38.       TYPE timer
   39.          CHARACTER(LEN=20)  :: cname
   40.       	  REAL(wp)  :: t_cpu, t_clock, tsum_cpu, tsum_clock, tmax_cpu, tmax_clock, tmin_cpu, tmin_clock, tsub_cpu, tsub_clock
   41.          INTEGER :: ncount, ncount_max, ncount_rate  
   42.          INTEGER :: niter
   43.          LOGICAL :: l_tdone
   44.          TYPE(timer), POINTER :: next => NULL()
   45.          TYPE(timer), POINTER :: prev => NULL()
   46.          TYPE(timer), POINTER :: parent_section => NULL()
   47.       END TYPE timer
   48.        
   49.       TYPE alltimer
   50.          CHARACTER(LEN=20), DIMENSION(:), POINTER :: cname => NULL()
   51.       	  REAL(wp), DIMENSION(:), POINTER :: tsum_cpu   => NULL()
   52.       	  REAL(wp), DIMENSION(:), POINTER :: tsum_clock => NULL()
   53.       	  INTEGER, DIMENSION(:), POINTER :: niter => NULL()
   54.          TYPE(alltimer), POINTER :: next => NULL()
   55.          TYPE(alltimer), POINTER :: prev => NULL()
   56.       END TYPE alltimer 
   57.     
   58.       TYPE(timer), POINTER :: s_timer_root => NULL()
   59.       TYPE(timer), POINTER :: s_timer      => NULL()
   60.       TYPE(timer), POINTER :: s_wrk        => NULL()
   61.       REAL(wp) :: t_overclock, t_overcpu
   62.       LOGICAL :: l_initdone = .FALSE.
   63.       INTEGER :: nsize
   64.       
   65.       ! Variables for coarse grain timing
   66.       REAL(wp) :: tot_etime, tot_ctime
   67.       REAL(kind=wp), DIMENSION(2)     :: t_elaps, t_cpu
   68.       REAL(wp), ALLOCATABLE, DIMENSION(:) :: all_etime, all_ctime
   69.       INTEGER :: nfinal_count, ncount, ncount_rate, ncount_max
   70.       INTEGER, DIMENSION(8)           :: nvalues
   71.       CHARACTER(LEN=8), DIMENSION(2)  :: cdate
   72.       CHARACTER(LEN=10), DIMENSION(2) :: ctime
   73.       CHARACTER(LEN=5)                :: czone
   74.        
   75.       ! From of ouput file (1/proc or one global)   !RB to put in nammpp or namctl
   76.       LOGICAL :: ln_onefile = .TRUE. 
   77.       LOGICAL :: lwriter
   78.       !!----------------------------------------------------------------------
   79.       !! NEMO/OPA 4.0 , NEMO Consortium (2011)
   80.       !! $Id: timing.F90 5120 2015-03-03 16:11:55Z acc $
   81.       !! Software governed by the CeCILL licence     (./LICENSE)
   82.       !!----------------------------------------------------------------------
   83.    CONTAINS
   84.    
   85.       SUBROUTINE timing_start(cdinfo)
   86.          !!----------------------------------------------------------------------
   87.          !!               ***  ROUTINE timing_start  ***
   88.          !! ** Purpose :   collect execution time
   89.          !!----------------------------------------------------------------------
   90.          CHARACTER(len=*), INTENT(in) :: cdinfo
   91.          !
   92.           
   93.          ! Create timing structure at first call
   94.          IF( .NOT. l_initdone ) THEN
   95.             CALL timing_ini_var(cdinfo)
   96.          ELSE
   97.             s_timer => s_timer_root
   98.             DO WHILE( TRIM(s_timer%cname) /= TRIM(cdinfo) ) 
   99.                IF( ASSOCIATED(s_timer%next) ) s_timer => s_timer%next
  100.             END DO
  101.          ENDIF         
  102.          s_timer%l_tdone = .FALSE.
  103.          s_timer%niter = s_timer%niter + 1
  104.          s_timer%t_cpu = 0.
  105.          s_timer%t_clock = 0.
  106.                      
  107.          ! CPU time collection
  108.          CALL CPU_TIME( s_timer%t_cpu  )
  109.          ! clock time collection
  110.    
  111.          s_timer%t_clock= MPI_Wtime()
  112.    
  113.    
  114.    
  115.    
  116.          !
  117.       END SUBROUTINE timing_start
  118.    
  119.    
  120.       SUBROUTINE timing_stop(cdinfo, csection)
  121.          !!----------------------------------------------------------------------
  122.          !!               ***  ROUTINE timing_stop  ***
  123.          !! ** Purpose :   finalize timing and output
  124.          !!----------------------------------------------------------------------
  125.          CHARACTER(len=*), INTENT(in) :: cdinfo
  126.          CHARACTER(len=*), INTENT(in), OPTIONAL :: csection
  127.          !
  128.          INTEGER  :: ifinal_count, iperiods    
  129.          REAL(wp) :: zcpu_end, zmpitime
  130.          !
  131.          s_wrk => NULL()
  132.    
  133.          ! clock time collection
  134.    
  135.          zmpitime = MPI_Wtime()
  136.    
  137.    
  138.    
  139.          ! CPU time collection
  140.          CALL CPU_TIME( zcpu_end )
  141.    
  142.          s_timer => s_timer_root
  143.          DO WHILE( TRIM(s_timer%cname) /= TRIM(cdinfo) ) 
  144.             IF( ASSOCIATED(s_timer%next) ) s_timer => s_timer%next
  145.          END DO
  146.     
  147.          ! CPU time correction
  148.          s_timer%t_cpu  = zcpu_end - s_timer%t_cpu - t_overcpu - s_timer%tsub_cpu
  149.      
  150.          ! clock time correction
  151.    
  152.          s_timer%t_clock = zmpitime - s_timer%t_clock - t_overclock - s_timer%tsub_clock
  153.    
  154.    
  155.    
  156.    
  157.    
  158.    
  159.          
  160.          ! Correction of parent section
  161.          IF( .NOT. PRESENT(csection) ) THEN
  162.             s_wrk => s_timer
  163.             DO WHILE ( ASSOCIATED(s_wrk%parent_section ) )
  164.                s_wrk => s_wrk%parent_section
  165.                s_wrk%tsub_cpu   = s_wrk%tsub_cpu   + s_timer%t_cpu 
  166.                s_wrk%tsub_clock = s_wrk%tsub_clock + s_timer%t_clock              
  167.             END DO
  168.          ENDIF
  169.                
  170.          ! time diagnostics 
  171.          s_timer%tsum_clock = s_timer%tsum_clock + s_timer%t_clock 
  172.          s_timer%tsum_cpu   = s_timer%tsum_cpu   + s_timer%t_cpu
  173.    !RB to use to get min/max during a time integration
  174.    !      IF( .NOT. l_initdone ) THEN
  175.    !         s_timer%tmin_clock = s_timer%t_clock 
  176.    !         s_timer%tmin_cpu   = s_timer%t_cpu 
  177.    !      ELSE
  178.    !         s_timer%tmin_clock = MIN( s_timer%tmin_clock, s_timer%t_clock ) 
  179.    !         s_timer%tmin_cpu   = MIN( s_timer%tmin_cpu  , s_timer%t_cpu   ) 
  180.    !      ENDIF   
  181.    !      s_timer%tmax_clock = MAX( s_timer%tmax_clock, s_timer%t_clock ) 
  182.    !      s_timer%tmax_cpu   = MAX( s_timer%tmax_cpu  , s_timer%t_cpu   )  
  183.          !
  184.          s_timer%tsub_clock = 0.
  185.          s_timer%tsub_cpu = 0.
  186.          s_timer%l_tdone = .TRUE.
  187.          !
  188.       END SUBROUTINE timing_stop
ftn-5002 ftn: NOTE File = timing.f90, Line = 188 
  Local variable "IFINAL_COUNT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 188 
  Local variable "IPERIODS" is declared but neither defined nor used.

  189.     
  190.     
  191.       SUBROUTINE timing_init
  192.          !!----------------------------------------------------------------------
  193.          !!               ***  ROUTINE timing_init  ***
  194.          !! ** Purpose :   open timing output file
  195.          !!----------------------------------------------------------------------
  196.          INTEGER :: iperiods, istart_count, ifinal_count
  197.          REAL(wp) :: zdum
  198.          LOGICAL :: ll_f
  199.                 
  200.          IF( ln_onefile ) THEN
  201.             IF( lwp) CALL ctl_opn( numtime, 'timing.output', 'REPLACE', 'FORMATTED', 'SEQUENTIAL', -1, numout,.TRUE., narea )
  202.             lwriter = lwp
  203.          ELSE
  204.             CALL ctl_opn( numtime, 'timing.output', 'REPLACE', 'FORMATTED', 'SEQUENTIAL', -1, numout,.FALSE., narea )
  205.             lwriter = .TRUE.
  206.          ENDIF
  207.          
  208.          IF( lwriter) THEN      
  209.             WRITE(numtime,*)
  210.             WRITE(numtime,*) '      CNRS - NERC - Met OFFICE - MERCATOR-ocean - CMCC - INGV'
  211.             WRITE(numtime,*) '                             NEMO team'
  212.             WRITE(numtime,*) '                  Ocean General Circulation Model'
  213.             WRITE(numtime,*) '                        version 3.6  (2015) '
  214.             WRITE(numtime,*)
  215.             WRITE(numtime,*) '                        Timing Informations '
  216.             WRITE(numtime,*)
  217.             WRITE(numtime,*)
  218.          ENDIF   
  219.          
  220.          ! Compute clock function overhead
  221.    
  222.          t_overclock = MPI_WTIME()
  223.          t_overclock = MPI_WTIME() - t_overclock
  224.    
  225.          ! Compute cpu_time function overhead
  226.          CALL CPU_TIME(zdum)
  227.          CALL CPU_TIME(t_overcpu)
  228.          
  229.          ! End overhead omputation  
  230.          t_overcpu = t_overcpu - zdum        
  231.          t_overclock = t_overcpu + t_overclock        
  232.    
  233.          ! Timing on date and time
  234.          CALL DATE_AND_TIME(cdate(1),ctime(1),czone,nvalues)
  235.        
  236.          CALL CPU_TIME(t_cpu(1))      
  237.          ! Start elapsed and CPU time counters
  238.          t_elaps(1) = MPI_WTIME()
  239.          !
  240.       END SUBROUTINE timing_init
ftn-5002 ftn: NOTE File = timing.f90, Line = 240 
  Local variable "IPERIODS" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 240 
  Local variable "ISTART_COUNT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 240 
  Local variable "IFINAL_COUNT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 240 
  Local variable "LL_F" is declared but neither defined nor used.

  241.    
  242.    
  243.       SUBROUTINE timing_finalize
  244.          !!----------------------------------------------------------------------
  245.          !!               ***  ROUTINE timing_finalize ***
  246.          !! ** Purpose :  compute average time 
  247.          !!               write timing output file
  248.          !!----------------------------------------------------------------------
  249.          TYPE(timer), POINTER :: s_temp
  250.          INTEGER :: idum, iperiods, icode
  251.          LOGICAL :: ll_ord, ll_averep
  252.          CHARACTER(len=120) :: clfmt            
  253.          
  254.          ll_averep = .TRUE.
  255.        
  256.          ! total CPU and elapse
  257.          CALL CPU_TIME(t_cpu(2))
  258.          t_cpu(2)   = t_cpu(2)    - t_cpu(1)   - t_overcpu
  259.          t_elaps(2) = MPI_WTIME() - t_elaps(1) - t_overclock
  260.    
  261.          ! End of timings on date & time
  262.          CALL DATE_AND_TIME(cdate(2),ctime(2),czone,nvalues)
  263.           
  264.          ! Compute the numer of routines
  265.          nsize = 0 
  266.          s_timer => s_timer_root
  267.          DO WHILE( ASSOCIATED(s_timer) )
  268.             nsize = nsize + 1
  269.             s_timer => s_timer%next
  270.          END DO
  271.          idum = nsize
  272.          IF(lk_mpp) CALL mpp_sum(idum)
  273.          IF( idum/jpnij /= nsize ) THEN
  274.             IF( lwriter ) WRITE(numtime,*) '        ===> W A R N I N G: '
  275.             IF( lwriter ) WRITE(numtime,*) ' Some CPU have different number of routines instrumented for timing'
  276.             IF( lwriter ) WRITE(numtime,*) ' No detailed report on averaged timing can be provided'
  277.             IF( lwriter ) WRITE(numtime,*) ' The following detailed report only deals with the current processor'
  278.             IF( lwriter ) WRITE(numtime,*)
  279.             ll_averep = .FALSE.
  280.          ENDIF   
  281.    
  282.          ! in MPI gather some info
  283.          ALLOCATE( all_etime(jpnij), all_ctime(jpnij) )
  284.          CALL MPI_ALLGATHER(t_elaps(2), 1, MPI_DOUBLE_PRECISION,   &
  285.                             all_etime , 1, MPI_DOUBLE_PRECISION,   &
  286.                             MPI_COMM_OPA, icode)
  287.          CALL MPI_ALLGATHER(t_cpu(2) , 1, MPI_DOUBLE_PRECISION,   &
  288.                             all_ctime, 1, MPI_DOUBLE_PRECISION,   &
  289.                             MPI_COMM_OPA, icode)
  290.          tot_etime = SUM(all_etime(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 290 
  A loop starting at line 290 was not vectorized because it contains a reference to a non-vector intrinsic on line 290.

  291.          tot_ctime = SUM(all_ctime(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 291 
  A loop starting at line 291 was not vectorized because it contains a reference to a non-vector intrinsic on line 291.

  292.    
  293.          ! write output file
  294.          IF( lwriter ) WRITE(numtime,*) 'Total timing (sum) :'
  295.          IF( lwriter ) WRITE(numtime,*) '--------------------'
  296.          IF( lwriter ) WRITE(numtime,"('Elapsed Time (s)  CPU Time (s)')")
  297.          IF( lwriter ) WRITE(numtime,'(5x,f12.3,1x,f12.3)')  tot_etime, tot_ctime
  298.          IF( lwriter ) WRITE(numtime,*) 
  299.          IF( ll_averep ) CALL waver_info
  300.          CALL wmpi_info
  301.          IF( lwriter ) CALL wcurrent_info
  302.          
  303.          clfmt='(1X,"Timing started on ",2(A2,"/"),A4," at ",2(A2,":"),A2," MET ",A3,":",A2," from GMT")'
  304.          IF( lwriter ) WRITE(numtime, TRIM(clfmt)) &           
  305.          &       cdate(1)(7:8), cdate(1)(5:6), cdate(1)(1:4),   &
  306.          &       ctime(1)(1:2), ctime(1)(3:4), ctime(1)(5:6),   &
  307.          &       czone(1:3),    czone(4:5)                     
  308.          clfmt='(1X,  "Timing   ended on ",2(A2,"/"),A4," at ",2(A2,":"),A2," MET ",A3,":",A2," from GMT")'
  309.          IF( lwriter ) WRITE(numtime, TRIM(clfmt)) &           
  310.          &       cdate(2)(7:8), cdate(2)(5:6), cdate(2)(1:4),   &
  311.          &       ctime(2)(1:2), ctime(2)(3:4), ctime(2)(5:6),   &
  312.          &       czone(1:3),    czone(4:5)
  313.    
  314.          IF( lwriter ) CLOSE(numtime) 
  315.          !
  316.       END SUBROUTINE timing_finalize
ftn-5002 ftn: NOTE File = timing.f90, Line = 316 
  Local variable "IPERIODS" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 316 
  Local variable "LL_ORD" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 316 
  Local variable "S_TEMP" is declared but neither defined nor used.

  317.       
  318.    
  319.       SUBROUTINE wcurrent_info
  320.          !!----------------------------------------------------------------------
  321.          !!               ***  ROUTINE wcurrent_info ***
  322.          !! ** Purpose :  compute and write timing output file
  323.          !!----------------------------------------------------------------------
  324.          LOGICAL :: ll_ord
  325.          CHARACTER(len=2048) :: clfmt            
  326.       
  327.          ! reorder the current list by elapse time      
  328.          s_wrk => NULL()
  329.          s_timer => s_timer_root
  330.          DO
  331.             ll_ord = .TRUE.
  332.             s_timer => s_timer_root
  333.             DO WHILE ( ASSOCIATED( s_timer%next ) )
  334.             IF (.NOT. ASSOCIATED(s_timer%next)) EXIT
  335.                IF ( s_timer%tsum_clock < s_timer%next%tsum_clock ) THEN 
  336.                   ALLOCATE(s_wrk)
  337.                   s_wrk = s_timer%next
  338.                   CALL insert  (s_timer, s_timer_root, s_wrk)
  339.                   CALL suppress(s_timer%next)            
  340.                   ll_ord = .FALSE.
  341.                   CYCLE            
  342.                ENDIF           
  343.             IF( ASSOCIATED(s_timer%next) ) s_timer => s_timer%next
  344.             END DO         
  345.             IF( ll_ord ) EXIT
  346.          END DO
  347.                
  348.          ! write current info
  349.          WRITE(numtime,*) 'Detailed timing for proc :', narea-1
  350.          WRITE(numtime,*) '--------------------------'
  351.          WRITE(numtime,*) 'Section             ',            &
  352.          &   'Elapsed Time (s)  ','Elapsed Time (%)  ',   &
  353.          &   'CPU Time(s)  ','CPU Time (%)  ','CPU/Elapsed  ','Frequency' 
  354.          s_timer => s_timer_root  
  355.          clfmt = '(1x,a,4x,f12.3,6x,f12.3,x,f12.3,2x,f12.3,6x,f7.3,2x,i9)'
  356.          DO WHILE ( ASSOCIATED(s_timer) )
  357.             WRITE(numtime,TRIM(clfmt))   s_timer%cname,   &
  358.             &   s_timer%tsum_clock,s_timer%tsum_clock*100./t_elaps(2),            &
  359.             &   s_timer%tsum_cpu  ,s_timer%tsum_cpu*100./t_cpu(2)    ,            &
  360.             &   s_timer%tsum_cpu/s_timer%tsum_clock, s_timer%niter
  361.             s_timer => s_timer%next
  362.          END DO
  363.          WRITE(numtime,*)
  364.          !                  
  365.       END SUBROUTINE wcurrent_info
  366.    
  367.       SUBROUTINE waver_info
  368.          !!----------------------------------------------------------------------
  369.          !!               ***  ROUTINE wcurrent_info ***
  370.          !! ** Purpose :  compute and write averaged timing informations
  371.          !!----------------------------------------------------------------------
  372.          TYPE(alltimer), POINTER :: sl_timer_glob_root => NULL()
  373.          TYPE(alltimer), POINTER :: sl_timer_glob      => NULL()
  374.          TYPE(timer), POINTER :: sl_timer_ave_root => NULL()
  375.          TYPE(timer), POINTER :: sl_timer_ave      => NULL()
  376.          INTEGER :: icode
  377.          INTEGER :: ierr
  378.          LOGICAL :: ll_ord           
  379.          CHARACTER(len=200) :: clfmt              
  380.                     
  381.          ! Initialised the global strucutre   
  382.          ALLOCATE(sl_timer_glob_root, Stat=ierr)
  383.          IF(ierr /= 0)THEN
  384.             WRITE(numtime,*) 'Failed to allocate global timing structure in waver_info'
  385.             RETURN
  386.          END IF
  387.    
  388.          ALLOCATE(sl_timer_glob_root%cname     (jpnij), &
  389.                   sl_timer_glob_root%tsum_cpu  (jpnij), &
  390.                   sl_timer_glob_root%tsum_clock(jpnij), &
  391.                   sl_timer_glob_root%niter     (jpnij), Stat=ierr)
  392.          IF(ierr /= 0)THEN
  393.             WRITE(numtime,*) 'Failed to allocate global timing structure in waver_info'
  394.             RETURN
  395.          END IF
  396.          sl_timer_glob_root%cname(:)       = ''
ftn-6263 ftn: VECTOR File = timing.f90, Line = 396 
  A loop starting at line 396 was not vectorized because it contains a reference to a non-vector intrinsic on line 396.

  397.          sl_timer_glob_root%tsum_cpu(:)   = 0._wp
ftn-6263 ftn: VECTOR File = timing.f90, Line = 397 
  A loop starting at line 397 was not vectorized because it contains a reference to a non-vector intrinsic on line 397.

  398.          sl_timer_glob_root%tsum_clock(:) = 0._wp
ftn-6263 ftn: VECTOR File = timing.f90, Line = 398 
  A loop starting at line 398 was not vectorized because it contains a reference to a non-vector intrinsic on line 398.

  399.          sl_timer_glob_root%niter(:)      = 0
ftn-6263 ftn: VECTOR File = timing.f90, Line = 399 
  A loop starting at line 399 was not vectorized because it contains a reference to a non-vector intrinsic on line 399.

  400.          sl_timer_glob_root%next => NULL()
  401.          sl_timer_glob_root%prev => NULL()
  402.          !ARPDBG - don't need to allocate a pointer that's immediately then
  403.          !         set to point to some other object.
  404.          !ALLOCATE(sl_timer_glob)
  405.          !ALLOCATE(sl_timer_glob%cname     (jpnij))
  406.          !ALLOCATE(sl_timer_glob%tsum_cpu  (jpnij))
  407.          !ALLOCATE(sl_timer_glob%tsum_clock(jpnij))
  408.          !ALLOCATE(sl_timer_glob%niter     (jpnij))
  409.          sl_timer_glob => sl_timer_glob_root
  410.          !
  411.          IF( narea .EQ. 1 ) THEN
  412.             ALLOCATE(sl_timer_ave_root)
  413.             sl_timer_ave_root%cname       = ''
  414.             sl_timer_ave_root%t_cpu      = 0._wp
  415.             sl_timer_ave_root%t_clock    = 0._wp
  416.             sl_timer_ave_root%tsum_cpu   = 0._wp
  417.             sl_timer_ave_root%tsum_clock = 0._wp
  418.             sl_timer_ave_root%tmax_cpu   = 0._wp
  419.             sl_timer_ave_root%tmax_clock = 0._wp
  420.             sl_timer_ave_root%tmin_cpu   = 0._wp
  421.             sl_timer_ave_root%tmin_clock = 0._wp
  422.             sl_timer_ave_root%tsub_cpu   = 0._wp
  423.             sl_timer_ave_root%tsub_clock = 0._wp
  424.             sl_timer_ave_root%ncount      = 0
  425.             sl_timer_ave_root%ncount_rate = 0
  426.             sl_timer_ave_root%ncount_max  = 0
  427.             sl_timer_ave_root%niter       = 0
  428.             sl_timer_ave_root%l_tdone  = .FALSE.
  429.             sl_timer_ave_root%next => NULL()
  430.             sl_timer_ave_root%prev => NULL()
  431.             ALLOCATE(sl_timer_ave)
  432.             sl_timer_ave => sl_timer_ave_root            
  433.          ENDIF 
  434.    
  435.          ! Gather info from all processors
  436.          s_timer => s_timer_root
  437.          DO WHILE ( ASSOCIATED(s_timer) )
  438.             CALL MPI_GATHER(s_timer%cname     , 20, MPI_CHARACTER,   &
  439.                             sl_timer_glob%cname, 20, MPI_CHARACTER,   &
                                                 ^                             
ftn-1438 ftn: CAUTION WAVER_INFO, File = timing.f90, Line = 439, Column = 40 
  This argument produces a possible copy in and out to a temporary variable.

  440.                             0, MPI_COMM_OPA, icode)
  441.             CALL MPI_GATHER(s_timer%tsum_clock     , 1, MPI_DOUBLE_PRECISION,   &
  442.                             sl_timer_glob%tsum_clock, 1, MPI_DOUBLE_PRECISION,   &
                                                 ^                                        
ftn-1438 ftn: CAUTION WAVER_INFO, File = timing.f90, Line = 442, Column = 40 
  This argument produces a possible copy in and out to a temporary variable.

  443.                             0, MPI_COMM_OPA, icode)
  444.             CALL MPI_GATHER(s_timer%tsum_cpu     , 1, MPI_DOUBLE_PRECISION,   &
  445.                             sl_timer_glob%tsum_cpu, 1, MPI_DOUBLE_PRECISION,   &
                                                 ^                                      
ftn-1438 ftn: CAUTION WAVER_INFO, File = timing.f90, Line = 445, Column = 40 
  This argument produces a possible copy in and out to a temporary variable.

  446.                             0, MPI_COMM_OPA, icode)
  447.             CALL MPI_GATHER(s_timer%niter     , 1, MPI_INTEGER,   &
  448.                             sl_timer_glob%niter, 1, MPI_INTEGER,   &
                                                 ^                          
ftn-1438 ftn: CAUTION WAVER_INFO, File = timing.f90, Line = 448, Column = 40 
  This argument produces a possible copy in and out to a temporary variable.

  449.                             0, MPI_COMM_OPA, icode)
  450.    
  451.             IF( narea == 1 .AND. ASSOCIATED(s_timer%next) ) THEN
  452.                ALLOCATE(sl_timer_glob%next)
  453.                ALLOCATE(sl_timer_glob%next%cname     (jpnij))
  454.                ALLOCATE(sl_timer_glob%next%tsum_cpu  (jpnij))
  455.                ALLOCATE(sl_timer_glob%next%tsum_clock(jpnij))
  456.                ALLOCATE(sl_timer_glob%next%niter     (jpnij))
  457.                sl_timer_glob%next%prev => sl_timer_glob
  458.                sl_timer_glob%next%next => NULL()
  459.                sl_timer_glob           => sl_timer_glob%next
  460.             ENDIF              
  461.             s_timer => s_timer%next
  462.          END DO      
  463.    
  464.             WRITE(*,*) 'ARPDBG: timing: done gathers'
  465.          
  466.          IF( narea == 1 ) THEN    
  467.             ! Compute some stats
  468.             sl_timer_glob => sl_timer_glob_root
  469.             DO WHILE( ASSOCIATED(sl_timer_glob) )
  470.                sl_timer_ave%cname  = sl_timer_glob%cname(1)
  471.                sl_timer_ave%tsum_cpu   = SUM   (sl_timer_glob%tsum_cpu  (:)) / jpnij
ftn-6263 ftn: VECTOR File = timing.f90, Line = 471 
  A loop starting at line 471 was not vectorized because it contains a reference to a non-vector intrinsic on line 471.

  472.                sl_timer_ave%tsum_clock = SUM   (sl_timer_glob%tsum_clock(:)) / jpnij
ftn-6263 ftn: VECTOR File = timing.f90, Line = 472 
  A loop starting at line 472 was not vectorized because it contains a reference to a non-vector intrinsic on line 472.

  473.                sl_timer_ave%tmax_cpu   = MAXVAL(sl_timer_glob%tsum_cpu  (:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 473 
  A loop starting at line 473 was not vectorized because it contains a reference to a non-vector intrinsic on line 473.

  474.                sl_timer_ave%tmax_clock = MAXVAL(sl_timer_glob%tsum_clock(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 474 
  A loop starting at line 474 was not vectorized because it contains a reference to a non-vector intrinsic on line 474.

  475.                sl_timer_ave%tmin_cpu   = MINVAL(sl_timer_glob%tsum_cpu  (:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 475 
  A loop starting at line 475 was not vectorized because it contains a reference to a non-vector intrinsic on line 475.

  476.                sl_timer_ave%tmin_clock = MINVAL(sl_timer_glob%tsum_clock(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 476 
  A loop starting at line 476 was not vectorized because it contains a reference to a non-vector intrinsic on line 476.

  477.                sl_timer_ave%niter      = SUM   (sl_timer_glob%niter     (:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 477 
  A loop starting at line 477 was not vectorized because it contains a reference to a non-vector intrinsic on line 477.

  478.                !
  479.                IF( ASSOCIATED(sl_timer_glob%next) ) THEN
  480.                   ALLOCATE(sl_timer_ave%next)          
  481.                   sl_timer_ave%next%prev => sl_timer_ave
  482.                   sl_timer_ave%next%next => NULL()           
  483.                   sl_timer_ave           => sl_timer_ave%next
  484.                ENDIF
  485.                sl_timer_glob => sl_timer_glob%next                                
  486.             END DO
  487.    
  488.             WRITE(*,*) 'ARPDBG: timing: done computing stats'
  489.          
  490.             ! reorder the averaged list by CPU time      
  491.             s_wrk => NULL()
  492.             sl_timer_ave => sl_timer_ave_root
  493.             DO
  494.                ll_ord = .TRUE.
  495.                sl_timer_ave => sl_timer_ave_root
  496.                DO WHILE( ASSOCIATED( sl_timer_ave%next ) )
  497.    
  498.                   IF( .NOT. ASSOCIATED(sl_timer_ave%next) ) EXIT
  499.    
  500.                   IF ( sl_timer_ave%tsum_clock < sl_timer_ave%next%tsum_clock ) THEN 
  501.                      ALLOCATE(s_wrk)
  502.                      ! Copy data into the new object pointed to by s_wrk
  503.                      s_wrk = sl_timer_ave%next
  504.                      ! Insert this new timer object before our current position
  505.                      CALL insert  (sl_timer_ave, sl_timer_ave_root, s_wrk)
  506.                      ! Remove the old object from the list
  507.                      CALL suppress(sl_timer_ave%next)            
  508.                      ll_ord = .FALSE.
  509.                      CYCLE            
  510.                   ENDIF           
  511.                   IF( ASSOCIATED(sl_timer_ave%next) ) sl_timer_ave => sl_timer_ave%next
  512.                END DO         
  513.                IF( ll_ord ) EXIT
  514.             END DO
  515.    
  516.             ! write averaged info
  517.             WRITE(numtime,"('Averaged timing on all processors :')")
  518.             WRITE(numtime,"('-----------------------------------')")
  519.             WRITE(numtime,"('Section',13x,'Elap. Time(s)',2x,'Elap. Time(%)',2x, &
  520.             &   'CPU Time(s)',2x,'CPU Time(%)',2x,'CPU/Elap',1x,   &
  521.             &   'Max elap(%)',2x,'Min elap(%)',2x,            &           
  522.             &   'Freq')")
  523.             sl_timer_ave => sl_timer_ave_root  
  524.             clfmt = '((A),E15.7,2x,f6.2,5x,f12.2,5x,f6.2,5x,f7.2,2x,f12.2,4x,f6.2,2x,f9.2)'
  525.             DO WHILE ( ASSOCIATED(sl_timer_ave) )
  526.                WRITE(numtime,TRIM(clfmt))   sl_timer_ave%cname(1:18),                            &
  527.                &   sl_timer_ave%tsum_clock,sl_timer_ave%tsum_clock*100.*jpnij/tot_etime,   &
  528.                &   sl_timer_ave%tsum_cpu  ,sl_timer_ave%tsum_cpu*100.*jpnij/tot_ctime  ,   &
  529.                &   sl_timer_ave%tsum_cpu/sl_timer_ave%tsum_clock,                          &
  530.                &   sl_timer_ave%tmax_clock*100.*jpnij/tot_etime,                           &
  531.                &   sl_timer_ave%tmin_clock*100.*jpnij/tot_etime,                           &                                               
  532.                &   sl_timer_ave%niter/REAL(jpnij)
  533.                sl_timer_ave => sl_timer_ave%next
  534.             END DO
  535.             WRITE(numtime,*)
  536.             !
  537.             DEALLOCATE(sl_timer_ave_root)
  538.          ENDIF
  539.          !
  540.          DEALLOCATE(sl_timer_glob_root)
  541.          !                  
  542.       END SUBROUTINE waver_info
  543.      
  544.      
  545.       SUBROUTINE wmpi_info
  546.          !!----------------------------------------------------------------------
  547.          !!               ***  ROUTINE wmpi_time  ***
  548.          !! ** Purpose :   compute and write a summary of MPI infos 
  549.          !!----------------------------------------------------------------------   
  550.          !   
  551.          INTEGER                            :: idum, icode
  552.          INTEGER, ALLOCATABLE, DIMENSION(:) :: iall_rank
  553.          REAL(wp) :: ztot_ratio
  554.          REAL(wp) :: zmax_etime, zmax_ctime, zmax_ratio, zmin_etime, zmin_ctime, zmin_ratio
  555.          REAL(wp) :: zavg_etime, zavg_ctime, zavg_ratio
  556.          REAL(wp), ALLOCATABLE, DIMENSION(:) :: zall_ratio
  557.          CHARACTER(LEN=128), dimension(8) :: cllignes
  558.          CHARACTER(LEN=128)               :: clhline, clstart_date, clfinal_date
  559.          CHARACTER(LEN=2048)              :: clfmt    
  560.       
  561.          ! Gather all times
  562.          ALLOCATE( zall_ratio(jpnij), iall_rank(jpnij) )
  563.          IF( narea == 1 ) THEN
  564.             iall_rank(:) = (/ (idum,idum=0,jpnij-1) /)
ftn-6262 ftn: VECTOR File = timing.f90, Line = 564 
  A loop starting at line 564 was not vectorized because it contains a call to a subroutine or function on line 564.

  565.       
  566.             ! Compute elapse user time
  567.             zavg_etime = tot_etime/REAL(jpnij,wp)
  568.             zmax_etime = MAXVAL(all_etime(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 568 
  A loop starting at line 568 was not vectorized because it contains a reference to a non-vector intrinsic on line 568.

  569.             zmin_etime = MINVAL(all_etime(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 569 
  A loop starting at line 569 was not vectorized because it contains a reference to a non-vector intrinsic on line 569.

  570.    
  571.             ! Compute CPU user time
  572.             zavg_ctime = tot_ctime/REAL(jpnij,wp)
  573.             zmax_ctime = MAXVAL(all_ctime(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 573 
  A loop starting at line 573 was not vectorized because it contains a reference to a non-vector intrinsic on line 573.

  574.             zmin_ctime = MINVAL(all_ctime(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 574 
  A loop starting at line 574 was not vectorized because it contains a reference to a non-vector intrinsic on line 574.

  575.       
  576.             ! Compute cpu/elapsed ratio
  577.             zall_ratio(:) = all_ctime(:) / all_etime(:)
ftn-6262 ftn: VECTOR File = timing.f90, Line = 577 
  A loop starting at line 577 was not vectorized because it contains a call to a subroutine or function on line 577.

  578.             ztot_ratio    = SUM(zall_ratio(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 578 
  A loop starting at line 578 was not vectorized because it contains a reference to a non-vector intrinsic on line 578.

  579.             zavg_ratio    = ztot_ratio/REAL(jpnij,wp)
  580.             zmax_ratio    = MAXVAL(zall_ratio(:))
ftn-6263 ftn: VECTOR File = timing.f90, Line = 580 
  A loop starting at line 580 was not vectorized because it contains a reference to a non-vector intrinsic on line 580.

  581.             zmin_ratio    = MINVAL(zall_ratio(:))   
ftn-6263 ftn: VECTOR File = timing.f90, Line = 581 
  A loop starting at line 581 was not vectorized because it contains a reference to a non-vector intrinsic on line 581.

  582.       
  583.             ! Output Format
  584.             clhline    ='1x,13("-"),"|",18("-"),"|",14("-"),"|",18("-"),/,'
  585.             cllignes(1)='(1x,"MPI summary report :",/,'
  586.             cllignes(2)='1x,"--------------------",//,'
  587.             cllignes(3)='1x,"Process Rank |"," Elapsed Time (s) |"," CPU Time (s) |"," Ratio CPU/Elapsed",/,'
  588.             cllignes(4)='    (1x,i4,9x,"|",f12.3,6x,"|",f12.3,2x,"|",4x,f7.3,/),'
  589.             WRITE(cllignes(4)(1:4),'(I4)') jpnij
  590.             cllignes(5)='1x,"Total        |",f12.3,6x,"|",F12.3,2x,"|",4x,f7.3,/,'
  591.             cllignes(6)='1x,"Minimum      |",f12.3,6x,"|",F12.3,2x,"|",4x,f7.3,/,'
  592.             cllignes(7)='1x,"Maximum      |",f12.3,6x,"|",F12.3,2x,"|",4x,f7.3,/,'
  593.             cllignes(8)='1x,"Average      |",f12.3,6x,"|",F12.3,2x,"|",4x,f7.3)'
  594.             clfmt=TRIM(cllignes(1))// TRIM(cllignes(2))//TRIM(cllignes(3))//          &
  595.               & TRIM(clhline)//TRIM(cllignes(4))//TRIM(clhline)//TRIM(cllignes(5))//  &
  596.               & TRIM(clhline)//TRIM(cllignes(6))//TRIM(clhline)//TRIM(cllignes(7))//  &
  597.               & TRIM(clhline)//TRIM(cllignes(8))
  598.             WRITE(numtime, TRIM(clfmt)) &
  599.                 (iall_rank(idum),all_etime(idum),all_ctime(idum),zall_ratio(idum),idum=1, jpnij), &
  600.                 tot_etime,     tot_ctime,     ztot_ratio,   &
  601.                 zmin_etime,    zmin_ctime,    zmin_ratio,   &
  602.                 zmax_etime,    zmax_ctime,    zmax_ratio,   &
  603.                 zavg_etime,    zavg_ctime,    zavg_ratio
  604.             WRITE(numtime,*)    
  605.          END IF
  606.          !
  607.          DEALLOCATE(zall_ratio, iall_rank)
  608.          !
  609.       END SUBROUTINE wmpi_info
ftn-5002 ftn: NOTE File = timing.f90, Line = 609 
  Local variable "CLFINAL_DATE" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 609 
  Local variable "ICODE" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = timing.f90, Line = 609 
  Local variable "CLSTART_DATE" is declared but neither defined nor used.

  610.    
  611.    
  612.       SUBROUTINE timing_ini_var(cdinfo)
  613.          !!----------------------------------------------------------------------
  614.          !!               ***  ROUTINE timing_ini_var  ***
  615.          !! ** Purpose :   create timing structure 
  616.          !!----------------------------------------------------------------------
  617.          CHARACTER(len=*), INTENT(in) :: cdinfo
  618.          LOGICAL :: ll_section
  619.           
  620.          !
  621.          IF( .NOT. ASSOCIATED(s_timer_root) ) THEN
  622.             ALLOCATE(s_timer_root)
  623.             s_timer_root%cname       = cdinfo
  624.             s_timer_root%t_cpu      = 0._wp
  625.             s_timer_root%t_clock    = 0._wp
  626.             s_timer_root%tsum_cpu   = 0._wp
  627.             s_timer_root%tsum_clock = 0._wp
  628.             s_timer_root%tmax_cpu   = 0._wp
  629.             s_timer_root%tmax_clock = 0._wp
  630.             s_timer_root%tmin_cpu   = 0._wp
  631.             s_timer_root%tmin_clock = 0._wp
  632.             s_timer_root%tsub_cpu   = 0._wp
  633.             s_timer_root%tsub_clock = 0._wp
  634.             s_timer_root%ncount      = 0
  635.             s_timer_root%ncount_rate = 0
  636.             s_timer_root%ncount_max  = 0
  637.             s_timer_root%niter       = 0
  638.             s_timer_root%l_tdone  = .FALSE.
  639.             s_timer_root%next => NULL()
  640.             s_timer_root%prev => NULL()
  641.             s_timer => s_timer_root
  642.             !
  643.             ALLOCATE(s_wrk)
  644.             s_wrk => NULL()
  645.             
  646.          ELSE
  647.             s_timer => s_timer_root
  648.             ! case of already existing area (typically inside a loop)
  649.             DO WHILE( ASSOCIATED(s_timer) ) 
  650.                IF( TRIM(s_timer%cname) .EQ. TRIM(cdinfo) ) RETURN
  651.                s_timer => s_timer%next
  652.             END DO
  653.             
  654.             ! end of the chain
  655.             s_timer => s_timer_root
  656.             DO WHILE( ASSOCIATED(s_timer%next) )
  657.                s_timer => s_timer%next
  658.             END DO
  659.              
  660.             ALLOCATE(s_timer%next)      
  661.             s_timer%next%cname       = cdinfo
  662.             s_timer%next%t_cpu      = 0._wp
  663.             s_timer%next%t_clock    = 0._wp
  664.             s_timer%next%tsum_cpu   = 0._wp
  665.             s_timer%next%tsum_clock = 0._wp  
  666.             s_timer%next%tmax_cpu   = 0._wp
  667.             s_timer%next%tmax_clock = 0._wp
  668.             s_timer%next%tmin_cpu   = 0._wp
  669.             s_timer%next%tmin_clock = 0._wp
  670.             s_timer%next%tsub_cpu   = 0._wp
  671.             s_timer%next%tsub_clock = 0._wp
  672.             s_timer%next%ncount      = 0
  673.             s_timer%next%ncount_rate = 0
  674.             s_timer%next%ncount_max  = 0
  675.             s_timer%next%niter       = 0
  676.             s_timer%next%l_tdone  = .FALSE.
  677.             s_timer%next%parent_section => NULL()
  678.             s_timer%next%prev => s_timer
  679.             s_timer%next%next => NULL()
  680.             s_timer => s_timer%next
  681.    
  682.             ! are we inside a section
  683.             s_wrk => s_timer%prev
  684.             ll_section = .FALSE.
  685.             DO WHILE( ASSOCIATED(s_wrk) .AND. .NOT. ll_section )
  686.                IF( .NOT. s_wrk%l_tdone ) THEN
  687.                   ll_section = .TRUE.
  688.                   s_timer%parent_section => s_wrk 
  689.                ENDIF
  690.                s_wrk => s_wrk%prev
  691.             END DO 
  692.          ENDIF         
  693.          !
  694.       END SUBROUTINE timing_ini_var
  695.    
  696.    
  697.       SUBROUTINE timing_reset
  698.          !!----------------------------------------------------------------------
  699.          !!               ***  ROUTINE timing_reset  ***
  700.          !! ** Purpose :   go to root of timing tree 
  701.          !!----------------------------------------------------------------------
  702.          l_initdone = .TRUE. 
  703.    !      IF(lwp) WRITE(numout,*)
  704.    !      IF(lwp) WRITE(numout,*) 'timing_reset : instrumented routines for timing'
  705.    !      IF(lwp) WRITE(numout,*) '~~~~~~~~~~~~'
  706.    !      CALL timing_list(s_timer_root)
  707.    !      WRITE(numout,*)
  708.          !
  709.       END SUBROUTINE timing_reset
  710.    
  711.    
  712.       RECURSIVE SUBROUTINE timing_list(ptr)
  713.       
  714.          TYPE(timer), POINTER, INTENT(inout) :: ptr
  715.          !
  716.          IF( ASSOCIATED(ptr%next) ) CALL timing_list(ptr%next)
  717.          IF(lwp) WRITE(numout,*)'   ', ptr%cname   
  718.          !
  719.       END SUBROUTINE timing_list
  720.    
  721.    
  722.       SUBROUTINE insert(sd_current, sd_root ,sd_ptr)
  723.          !!----------------------------------------------------------------------
  724.          !!               ***  ROUTINE insert  ***
  725.          !! ** Purpose :   insert an element in timer structure
  726.          !!----------------------------------------------------------------------
  727.          TYPE(timer), POINTER, INTENT(inout) :: sd_current, sd_root, sd_ptr
  728.          !
  729.         
  730.          IF( ASSOCIATED( sd_current, sd_root ) ) THEN
  731.             ! If our current element is the root element then
  732.             ! replace it with the one being inserted
  733.             sd_root => sd_ptr
  734.          ELSE
  735.             sd_current%prev%next => sd_ptr
  736.          END IF
  737.          sd_ptr%next     => sd_current
  738.          sd_ptr%prev     => sd_current%prev
  739.          sd_current%prev => sd_ptr
  740.          ! Nullify the pointer to the new element now that it is held
  741.          ! within the list. If we don't do this then a subsequent call
  742.          ! to ALLOCATE memory to this pointer will fail.
  743.          sd_ptr => NULL()
  744.          !    
  745.       END SUBROUTINE insert
  746.      
  747.      
  748.       SUBROUTINE suppress(sd_ptr)
  749.          !!----------------------------------------------------------------------
  750.          !!               ***  ROUTINE suppress  ***
  751.          !! ** Purpose :   supress an element in timer structure
  752.          !!----------------------------------------------------------------------
  753.          TYPE(timer), POINTER, INTENT(inout) :: sd_ptr
  754.          !
  755.          TYPE(timer), POINTER :: sl_temp
  756.        
  757.          sl_temp => sd_ptr
  758.          sd_ptr => sd_ptr%next    
  759.          IF ( ASSOCIATED(sl_temp%next) ) sl_temp%next%prev => sl_temp%prev
  760.          DEALLOCATE(sl_temp)
  761.          sl_temp => NULL()
  762.          !
  763.        END SUBROUTINE suppress
  764.    
  765.       !!=====================================================================
  766.    END MODULE timing


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     C o m m o n   B l o c k   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB5/                            Length: 4 bytes

     TIMING                           

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIFCMB9/                            Length: 4 bytes

     TIMING                           

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV1/                            Length: 28 bytes

     TIMING                           

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV2/                            Length: 24 bytes

     TIMING                           

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIVC/                            Length: 2 bytes

     TIMING                           


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
AGRIF_CFIXED in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
AGRIF_ROOT in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ASSOCIATED(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_START in TIMING (Line 660, file timing.f90)
                   TIMING_STOP in TIMING (Line 705, file timing.f90)
                   TIMING_STOP in TIMING (Line 724, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 828, file timing.f90)
                   WCURRENT_INFO in TIMING (Line 894, file timing.f90)
                   WCURRENT_INFO in TIMING (Line 895, file timing.f90)
                   WCURRENT_INFO in TIMING (Line 904, file timing.f90)
                   WCURRENT_INFO in TIMING (Line 917, file timing.f90)
                   WAVER_INFO in TIMING (Line 998, file timing.f90)
                   WAVER_INFO in TIMING (Line 1012, file timing.f90)
                   WAVER_INFO in TIMING (Line 1030, file timing.f90)
                   WAVER_INFO in TIMING (Line 1040, file timing.f90)
                   WAVER_INFO in TIMING (Line 1057, file timing.f90)
                   WAVER_INFO in TIMING (Line 1059, file timing.f90)
                   WAVER_INFO in TIMING (Line 1072, file timing.f90)
                   WAVER_INFO in TIMING (Line 1086, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1182, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1210, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1217, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1246, file timing.f90)
                   TIMING_LIST in TIMING (Line 1277, file timing.f90)
                   INSERT in TIMING (Line 1291, file timing.f90)
                   SUPPRESS in TIMING (Line 1320, file timing.f90)

Name  Messages
----  --------
CPU_TIME(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_START in TIMING (Line 669, file timing.f90)
                   TIMING_STOP in TIMING (Line 701, file timing.f90)
                   TIMING_INIT in TIMING (Line 787, file timing.f90)
                   TIMING_INIT in TIMING (Line 788, file timing.f90)
                   TIMING_INIT in TIMING (Line 797, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 818, file timing.f90)

Name  Messages
----  --------
CTL_NAM in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_OPN in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_INIT in TIMING (Line 762, file timing.f90)
                   TIMING_INIT in TIMING (Line 765, file timing.f90)

Name  Messages
----  --------
CTL_STOP in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_WARN in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DATE_AND_TIME(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_INIT in TIMING (Line 795, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 823, file timing.f90)

Name  Messages
----  --------
DOM_OCE
      Defined as:  No definitions.

      Used By:     TIMING
                   TIMING  (indirectly)

Name  Messages
----  --------
DOM_OCE_ALLOC in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GET_NF90_SYMBOL in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GET_UNIT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INSERT in TIMING
      Defined as:  Subroutine (line 1283, file timing.f90)

      Interface:   None

      Called By:   WCURRENT_INFO in TIMING (Line 899, file timing.f90)
                   WAVER_INFO in TIMING (Line 1066, file timing.f90)

      Calls:       NULL(Intrinsic) (Line 1304, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1291, file timing.f90)

Name  Messages
----  --------
IN_OUT_MANAGER
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
LIB_MPP
      Defined as:  No definitions.

      Used By:     TIMING

Name  Messages
----  --------
MAXVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WAVER_INFO in TIMING (Line 1034, file timing.f90)
                   WAVER_INFO in TIMING (Line 1035, file timing.f90)
                   WMPI_INFO in TIMING (Line 1129, file timing.f90)
                   WMPI_INFO in TIMING (Line 1134, file timing.f90)
                   WMPI_INFO in TIMING (Line 1141, file timing.f90)

Name  Messages
----  --------
MINVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WAVER_INFO in TIMING (Line 1036, file timing.f90)
                   WAVER_INFO in TIMING (Line 1037, file timing.f90)
                   WMPI_INFO in TIMING (Line 1130, file timing.f90)
                   WMPI_INFO in TIMING (Line 1135, file timing.f90)
                   WMPI_INFO in TIMING (Line 1142, file timing.f90)

Name  Messages
----  --------
MPI_ALLGATHER
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_FINALIZE in TIMING (Line 845, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 848, file timing.f90)

Name  Messages
----  --------
MPI_COMM_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_CONVERSION_FN_NULL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_GATHER
      Defined as:  No definitions.

      Interface:   None

      Called By:   WAVER_INFO in TIMING (Line 999, file timing.f90)
                   WAVER_INFO in TIMING (Line 1002, file timing.f90)
                   WAVER_INFO in TIMING (Line 1005, file timing.f90)
                   WAVER_INFO in TIMING (Line 1008, file timing.f90)

Name  Messages
----  --------
MPI_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_WTIME
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_START in TIMING (Line 672, file timing.f90)
                   TIMING_STOP in TIMING (Line 696, file timing.f90)
                   TIMING_INIT in TIMING (Line 783, file timing.f90)
                   TIMING_INIT in TIMING (Line 784, file timing.f90)
                   TIMING_INIT in TIMING (Line 799, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 820, file timing.f90)

Name  Messages
----  --------
MPPBCAST_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPGATHER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_REAL_MULTIPLE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPRECV in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSCATTER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSEND in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSTOP in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_REALDD in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_INT in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_FINALIZE in TIMING (Line 833, file timing.f90)

Name  Messages
----  --------
MPPSUM_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_REALDD in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSYNC in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_COMM_FREE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_ICE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_NORTH in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_ZNL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_E in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_ICB in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_9 in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_E in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_ICB in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_MULTIPLE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_3D_GATHER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_BDY_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_BDY_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_SUM_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_SUM_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MAXLOC2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MAXLOC3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MINLOC2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MINLOC3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MYNODE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NC4INTERFACE
      Defined as:  No definitions.

      Used By:     TIMING  (indirectly)

Name  Messages
----  --------
NULL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING (Line 619, file timing.f90)
                   TIMING (Line 620, file timing.f90)
                   TIMING (Line 621, file timing.f90)
                   TIMING_STOP in TIMING (Line 692, file timing.f90)
                   WCURRENT_INFO in TIMING (Line 889, file timing.f90)
                   WAVER_INFO in TIMING (Line 933, file timing.f90)
                   WAVER_INFO in TIMING (Line 934, file timing.f90)
                   WAVER_INFO in TIMING (Line 935, file timing.f90)
                   WAVER_INFO in TIMING (Line 936, file timing.f90)
                   WAVER_INFO in TIMING (Line 961, file timing.f90)
                   WAVER_INFO in TIMING (Line 962, file timing.f90)
                   WAVER_INFO in TIMING (Line 990, file timing.f90)
                   WAVER_INFO in TIMING (Line 991, file timing.f90)
                   WAVER_INFO in TIMING (Line 1019, file timing.f90)
                   WAVER_INFO in TIMING (Line 1043, file timing.f90)
                   WAVER_INFO in TIMING (Line 1052, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1200, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1201, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1205, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1238, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1240, file timing.f90)
                   INSERT in TIMING (Line 1304, file timing.f90)
                   SUPPRESS in TIMING (Line 1322, file timing.f90)

Name  Messages
----  --------
PAR_KIND
      Defined as:  No definitions.

      Used By:     TIMING  (indirectly)
                   TIMING  (indirectly)

Name  Messages
----  --------
PAR_OCE
      Defined as:  No definitions.

      Used By:     TIMING  (indirectly)
                   TIMING  (indirectly)
                   TIMING  (indirectly)

Name  Messages
----  --------
PMPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PRESENT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_STOP in TIMING (Line 722, file timing.f90)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WAVER_INFO in TIMING (Line 1093, file timing.f90)
                   WMPI_INFO in TIMING (Line 1128, file timing.f90)
                   WMPI_INFO in TIMING (Line 1133, file timing.f90)
                   WMPI_INFO in TIMING (Line 1140, file timing.f90)

Name  Messages
----  --------
SET_NF90_DEF_VAR_CHUNKING in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SET_NF90_DEF_VAR_DEFLATE in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SUM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_FINALIZE in TIMING (Line 851, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 852, file timing.f90)
                   WAVER_INFO in TIMING (Line 1032, file timing.f90)
                   WAVER_INFO in TIMING (Line 1033, file timing.f90)
                   WAVER_INFO in TIMING (Line 1038, file timing.f90)
                   WMPI_INFO in TIMING (Line 1139, file timing.f90)

Name  Messages
----  --------
SUPPRESS in TIMING
      Defined as:  Subroutine (line 1309, file timing.f90)

      Interface:   None

      Called By:   WCURRENT_INFO in TIMING (Line 900, file timing.f90)
                   WAVER_INFO in TIMING (Line 1068, file timing.f90)

      Calls:       NULL(Intrinsic) (Line 1322, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1320, file timing.f90)

Name  Messages
----  --------
TIMING
      Defined as:  Module (line 1, file timing.f90)

      Calls:       NULL(Intrinsic) (Line 619, file timing.f90)
                   NULL(Intrinsic) (Line 620, file timing.f90)
                   NULL(Intrinsic) (Line 621, file timing.f90)

        Uses:      PAR_KIND  (indirectly)
                   NC4INTERFACE  (indirectly)
                   PAR_OCE  (indirectly)
                   DOM_OCE
                   PAR_KIND  (indirectly)
                   PAR_OCE  (indirectly)
                   LIB_MPP
                   PAR_OCE  (indirectly)
                   DOM_OCE  (indirectly)

Name  Messages
----  --------
TIMING_FINALIZE in TIMING
      Defined as:  Subroutine (line 29, file timing.f90)

      Interface:   None

      Calls:       MPI_WTIME (Line 820, file timing.f90)
                   WCURRENT_INFO in TIMING (Line 862, file timing.f90)
                   WAVER_INFO in TIMING (Line 860, file timing.f90)
                   WMPI_INFO in TIMING (Line 861, file timing.f90)
                   MPPSUM_INT in LIB_MPP (Line 833, file timing.f90)
                   CPU_TIME(Intrinsic) (Line 818, file timing.f90)
                   DATE_AND_TIME(Intrinsic) (Line 823, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 828, file timing.f90)
                   MPI_ALLGATHER (Line 845, file timing.f90)
                   MPI_ALLGATHER (Line 848, file timing.f90)
                   SUM(Intrinsic) (Line 851, file timing.f90)
                   SUM(Intrinsic) (Line 852, file timing.f90)
                   TRIM(Intrinsic) (Line 865, file timing.f90)
                   TRIM(Intrinsic) (Line 870, file timing.f90)

Name  Messages
----  --------
TIMING_INIT in TIMING
      Defined as:  Subroutine (line 29, file timing.f90)

      Interface:   None

      Calls:       MPI_WTIME (Line 783, file timing.f90)
                   MPI_WTIME (Line 784, file timing.f90)
                   MPI_WTIME (Line 799, file timing.f90)
                   CTL_OPN in LIB_MPP (Line 762, file timing.f90)
                   CTL_OPN in LIB_MPP (Line 765, file timing.f90)
                   CPU_TIME(Intrinsic) (Line 787, file timing.f90)
                   CPU_TIME(Intrinsic) (Line 788, file timing.f90)
                   CPU_TIME(Intrinsic) (Line 797, file timing.f90)
                   DATE_AND_TIME(Intrinsic) (Line 795, file timing.f90)

Name  Messages
----  --------
TIMING_INI_VAR in TIMING
      Defined as:  Subroutine (line 1173, file timing.f90)

      Interface:   None

      Called By:   TIMING_START in TIMING (Line 656, file timing.f90)

      Calls:       NULL(Intrinsic) (Line 1200, file timing.f90)
                   NULL(Intrinsic) (Line 1201, file timing.f90)
                   NULL(Intrinsic) (Line 1205, file timing.f90)
                   NULL(Intrinsic) (Line 1238, file timing.f90)
                   NULL(Intrinsic) (Line 1240, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1182, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1210, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1217, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1246, file timing.f90)
                   TRIM(Intrinsic) (Line 1211, file timing.f90)
                   TRIM(Intrinsic) (Line 1211, file timing.f90)

Name  Messages
----  --------
TIMING_LIST in TIMING
      Defined as:  Subroutine (line 1273, file timing.f90)

      Interface:   None

      Called By:   TIMING_LIST in TIMING (Line 1277, file timing.f90)

      Calls:       TIMING_LIST in TIMING (Line 1277, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1277, file timing.f90)

Name  Messages
----  --------
TIMING_RESET in TIMING
      Defined as:  Subroutine (line 30, file timing.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TIMING_START in TIMING
      Defined as:  Subroutine (line 31, file timing.f90)

      Interface:   None

      Calls:       MPI_WTIME (Line 672, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 656, file timing.f90)
                   TRIM(Intrinsic) (Line 659, file timing.f90)
                   TRIM(Intrinsic) (Line 659, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 660, file timing.f90)
                   CPU_TIME(Intrinsic) (Line 669, file timing.f90)

Name  Messages
----  --------
TIMING_STOP in TIMING
      Defined as:  Subroutine (line 31, file timing.f90)

      Interface:   None

      Calls:       MPI_WTIME (Line 696, file timing.f90)
                   NULL(Intrinsic) (Line 692, file timing.f90)
                   CPU_TIME(Intrinsic) (Line 701, file timing.f90)
                   TRIM(Intrinsic) (Line 704, file timing.f90)
                   TRIM(Intrinsic) (Line 704, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 705, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 724, file timing.f90)
                   PRESENT(Intrinsic) (Line 722, file timing.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   TIMING_START in TIMING (Line 659, file timing.f90)
                   TIMING_START in TIMING (Line 659, file timing.f90)
                   TIMING_STOP in TIMING (Line 704, file timing.f90)
                   TIMING_STOP in TIMING (Line 704, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 865, file timing.f90)
                   TIMING_FINALIZE in TIMING (Line 870, file timing.f90)
                   WCURRENT_INFO in TIMING (Line 918, file timing.f90)
                   WAVER_INFO in TIMING (Line 1087, file timing.f90)
                   WMPI_INFO in TIMING (Line 1155, file timing.f90)
                   WMPI_INFO in TIMING (Line 1155, file timing.f90)
                   WMPI_INFO in TIMING (Line 1155, file timing.f90)
                   WMPI_INFO in TIMING (Line 1156, file timing.f90)
                   WMPI_INFO in TIMING (Line 1156, file timing.f90)
                   WMPI_INFO in TIMING (Line 1156, file timing.f90)
                   WMPI_INFO in TIMING (Line 1156, file timing.f90)
                   WMPI_INFO in TIMING (Line 1157, file timing.f90)
                   WMPI_INFO in TIMING (Line 1157, file timing.f90)
                   WMPI_INFO in TIMING (Line 1157, file timing.f90)
                   WMPI_INFO in TIMING (Line 1157, file timing.f90)
                   WMPI_INFO in TIMING (Line 1158, file timing.f90)
                   WMPI_INFO in TIMING (Line 1158, file timing.f90)
                   WMPI_INFO in TIMING (Line 1159, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1211, file timing.f90)
                   TIMING_INI_VAR in TIMING (Line 1211, file timing.f90)

Name  Messages
----  --------
WAVER_INFO in TIMING
      Defined as:  Subroutine (line 928, file timing.f90)

      Interface:   None

      Called By:   TIMING_FINALIZE in TIMING (Line 860, file timing.f90)

      Calls:       INSERT in TIMING (Line 1066, file timing.f90)
                   SUPPRESS in TIMING (Line 1068, file timing.f90)
                   NULL(Intrinsic) (Line 933, file timing.f90)
                   NULL(Intrinsic) (Line 934, file timing.f90)
                   NULL(Intrinsic) (Line 935, file timing.f90)
                   NULL(Intrinsic) (Line 936, file timing.f90)
                   NULL(Intrinsic) (Line 961, file timing.f90)
                   NULL(Intrinsic) (Line 962, file timing.f90)
                   NULL(Intrinsic) (Line 990, file timing.f90)
                   NULL(Intrinsic) (Line 991, file timing.f90)
                   NULL(Intrinsic) (Line 1019, file timing.f90)
                   NULL(Intrinsic) (Line 1043, file timing.f90)
                   NULL(Intrinsic) (Line 1052, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 998, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1012, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1030, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1040, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1057, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1059, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1072, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 1086, file timing.f90)
                   MPI_GATHER (Line 999, file timing.f90)
                   MPI_GATHER (Line 1002, file timing.f90)
                   MPI_GATHER (Line 1005, file timing.f90)
                   MPI_GATHER (Line 1008, file timing.f90)
                   SUM(Intrinsic) (Line 1032, file timing.f90)
                   SUM(Intrinsic) (Line 1033, file timing.f90)
                   SUM(Intrinsic) (Line 1038, file timing.f90)
                   MAXVAL(Intrinsic) (Line 1034, file timing.f90)
                   MAXVAL(Intrinsic) (Line 1035, file timing.f90)
                   MINVAL(Intrinsic) (Line 1036, file timing.f90)
                   MINVAL(Intrinsic) (Line 1037, file timing.f90)
                   TRIM(Intrinsic) (Line 1087, file timing.f90)
                   REAL(Intrinsic) (Line 1093, file timing.f90)

Name  Messages
----  --------
WCURRENT_INFO in TIMING
      Defined as:  Subroutine (line 880, file timing.f90)

      Interface:   None

      Called By:   TIMING_FINALIZE in TIMING (Line 862, file timing.f90)

      Calls:       INSERT in TIMING (Line 899, file timing.f90)
                   SUPPRESS in TIMING (Line 900, file timing.f90)
                   NULL(Intrinsic) (Line 889, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 894, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 895, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 904, file timing.f90)
                   ASSOCIATED(Intrinsic) (Line 917, file timing.f90)
                   TRIM(Intrinsic) (Line 918, file timing.f90)

Name  Messages
----  --------
WMPI_INFO in TIMING
      Defined as:  Subroutine (line 1106, file timing.f90)

      Interface:   None

      Called By:   TIMING_FINALIZE in TIMING (Line 861, file timing.f90)

      Calls:       REAL(Intrinsic) (Line 1128, file timing.f90)
                   REAL(Intrinsic) (Line 1133, file timing.f90)
                   REAL(Intrinsic) (Line 1140, file timing.f90)
                   MAXVAL(Intrinsic) (Line 1129, file timing.f90)
                   MAXVAL(Intrinsic) (Line 1134, file timing.f90)
                   MAXVAL(Intrinsic) (Line 1141, file timing.f90)
                   MINVAL(Intrinsic) (Line 1130, file timing.f90)
                   MINVAL(Intrinsic) (Line 1135, file timing.f90)
                   MINVAL(Intrinsic) (Line 1142, file timing.f90)
                   SUM(Intrinsic) (Line 1139, file timing.f90)
                   TRIM(Intrinsic) (Line 1155, file timing.f90)
                   TRIM(Intrinsic) (Line 1155, file timing.f90)
                   TRIM(Intrinsic) (Line 1155, file timing.f90)
                   TRIM(Intrinsic) (Line 1156, file timing.f90)
                   TRIM(Intrinsic) (Line 1156, file timing.f90)
                   TRIM(Intrinsic) (Line 1156, file timing.f90)
                   TRIM(Intrinsic) (Line 1156, file timing.f90)
                   TRIM(Intrinsic) (Line 1157, file timing.f90)
                   TRIM(Intrinsic) (Line 1157, file timing.f90)
                   TRIM(Intrinsic) (Line 1157, file timing.f90)
                   TRIM(Intrinsic) (Line 1157, file timing.f90)
                   TRIM(Intrinsic) (Line 1158, file timing.f90)
                   TRIM(Intrinsic) (Line 1158, file timing.f90)
                   TRIM(Intrinsic) (Line 1159, file timing.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
