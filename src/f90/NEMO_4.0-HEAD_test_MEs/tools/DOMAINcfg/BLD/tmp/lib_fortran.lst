%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/lib_fortran.f90
Compiled : 04/29/22  10:43:16
Compiler : Version 8.3.4
Ftnlx    : Version 8318 (libcif 83016)
Target   : x86-64
Command  : ftn_driver.exe -hcpu=haswell -hstatic -D__CRAYXC -D__CRAY_HASWELL
           -D__CRAYXT_COMPUTE_LINUX_TARGET -hnetwork=aries -olib_fortran.o
           -I/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HE
           AD_test_MEs/tools/DOMAINcfg/BLD/inc -sreal64 -sinteger32 -Ovector0
           -hfp0 -O0 -hflex_mp=intolerant -eCID
           -I/opt/cray/netcdf-hdf5parallel/4.3.2/CRAY/83/include
           -I/opt/cray/hdf5-parallel/1.8.13/CRAY/83/include
           -I/common/moci/modules/packages/XIOS/2.0/24708/952/inc
           -I/common/moci/modules/packages/oasis3-mct/2.0/24708/1765/build/lib/m
           ct
           -I/common/moci/modules/packages/oasis3-mct/2.0/24708/1765/build/lib/p
           smile.MPI1 -c -I/opt/cray/cce/8.3.4/craylibs/x86-64/include
           -I/opt/cray/netcdf-hdf5parallel/4.3.2/CRAY/83/include
           -I/opt/cray/hdf5-parallel/1.8.13/CRAY/83/include
           -I/opt/cray/libsci/13.0.1/CRAY/83/haswell/include
           -I/opt/cray/mpt/7.0.4/gni/mpich2-cray/83/include
           -I/opt/cray/rca/1.0.0-2.0502.60530.1.62.ari/include
           -I/opt/cray/alps/5.2.4-2.0502.9774.31.11.ari/include
           -I/opt/cray/xpmem/0.1-2.0502.64982.5.3.ari/include
           -I/opt/cray/gni-headers/4.0-1.0502.10859.7.8.ari/include
           -I/opt/cray/dmapp/7.0.1-1.0502.11080.8.76.ari/include
           -I/opt/cray/pmi/5.0.5-1.0000.10300.134.8.ari/include
           -I/opt/cray/ugni/6.0-1.0502.10863.8.29.ari/include
           -I/opt/cray/udreg/2.3.2-1.0502.10518.2.17.ari/include
           -I/opt/cray/cce/8.3.4/craylibs/x86-64/pkgconfig/../include
           -I/opt/cray/cce/8.3.4/craylibs/x86-64/include
           -I/opt/cray/wlm_detect/1.0-1.0502.64649.2.1.ari/include
           -I/opt/cray/krca/1.0.0-2.0502.63139.4.31.ari/include
           -I/opt/cray-hss-devel/7.2.0/include /projects/jmmp/dbruciaf/NEMO/CHEC
           KOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/lib
           _fortran.f90

ftnlx report
------------
Source   : /projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp//projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/NEMO_4.0-HEAD_test_MEs/tools/DOMAINcfg/src/lib_fortran.f90
Date     : 04/29/2022  10:43:17


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    1.    MODULE lib_fortran
    2.       !!======================================================================
    3.       !!                       ***  MODULE  lib_fortran  ***
    4.       !! Fortran utilities:  includes some low levels fortran functionality
    5.       !!======================================================================
    6.       !! History :  3.2  !  2010-05  (M. Dunphy, R. Benshila)  Original code
    7.       !!            3.4  !  2013-06  (C. Rousset)  add glob_min, glob_max 
    8.       !!                                           + 3d dim. of input is fexible (jpk, jpl...) 
    9.       !!----------------------------------------------------------------------
   10.    
   11.       !!----------------------------------------------------------------------
   12.       !!   glob_sum    : generic interface for global masked summation over
   13.       !!                 the interior domain for 1 or 2 2D or 3D arrays
   14.       !!                 it works only for T points
   15.       !!   SIGN        : generic interface for SIGN to overwrite f95 behaviour
   16.       !!                 of intrinsinc sign function
   17.       !!----------------------------------------------------------------------
   18.       USE par_oce         ! Ocean parameter
                 ^                                 
ftn-1193 ftn: CAUTION LIB_FORTRAN, File = lib_fortran.f90, Line = 18, Column = 8 
  Module "PAR_KIND" is indirectly used in module "PAR_OCE" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/par_kind.o".  That file no
  longer exists.

   19.       USE dom_oce         ! ocean domain
   20.       USE in_out_manager  ! I/O manager
                 ^                             
ftn-1193 ftn: CAUTION LIB_FORTRAN, File = lib_fortran.f90, Line = 20, Column = 8 
  Module "NC4INTERFACE" is indirectly used in module "IN_OUT_MANAGER" and is from file
  "/projects/jmmp/dbruciaf/NEMO/CHECKOUTS_RELEASE-4.0-HEAD/tools_r4.0-HEAD_dev_MEs/DOMAINcfg/BLD/tmp/nc4interface.o".  That file no
  longer exists.

   21.       USE lib_mpp         ! distributed memory computing
   22.    
   23.       IMPLICIT NONE
   24.       PRIVATE
   25.    
   26.       PUBLIC   glob_sum      ! used in many places (masked with tmask_i)
   27.       PUBLIC   glob_sum_full ! used in many places (masked with tmask_h, ie omly over the halos)
   28.       PUBLIC   DDPDD         ! also used in closea module
   29.       PUBLIC   glob_min, glob_max
   30.    
   31.       PUBLIC SIGN
   32.    
   33.    
   34.       INTERFACE glob_sum
   35.          MODULE PROCEDURE glob_sum_1d, glob_sum_2d, glob_sum_3d, &
   36.             &             glob_sum_2d_a, glob_sum_3d_a
   37.       END INTERFACE
   38.       INTERFACE glob_sum_full
   39.          MODULE PROCEDURE glob_sum_full_2d, glob_sum_full_3d
   40.       END INTERFACE
   41.       INTERFACE glob_min
   42.          MODULE PROCEDURE glob_min_2d, glob_min_3d,glob_min_2d_a, glob_min_3d_a 
   43.       END INTERFACE
   44.       INTERFACE glob_max
   45.          MODULE PROCEDURE glob_max_2d, glob_max_3d,glob_max_2d_a, glob_max_3d_a 
   46.       END INTERFACE
   47.    
   48.    
   49.       INTERFACE SIGN
   50.          MODULE PROCEDURE SIGN_SCALAR, SIGN_ARRAY_1D, SIGN_ARRAY_2D, SIGN_ARRAY_3D,   &
   51.             &             SIGN_ARRAY_1D_A, SIGN_ARRAY_2D_A, SIGN_ARRAY_3D_A,          &
   52.             &             SIGN_ARRAY_1D_B, SIGN_ARRAY_2D_B, SIGN_ARRAY_3D_B
   53.       END INTERFACE
   54.    
   55.    
   56.       !!----------------------------------------------------------------------
   57.       !! NEMO/OCE 4.0 , NEMO Consortium (2018)
   58.       !! $Id: lib_fortran.F90 6140 2015-12-21 11:35:23Z timgraham $
   59.       !! Software governed by the CeCILL licence     (./LICENSE)
   60.       !!----------------------------------------------------------------------
   61.    CONTAINS
   62.    
   63.    
   64.       ! --- SUM ---
   65.    
   66.       FUNCTION glob_sum_1d( ptab, kdim )
   67.          !!-----------------------------------------------------------------------
   68.          !!                  ***  FUNCTION  glob_sum_1D  ***
   69.          !!
   70.          !! ** Purpose : perform a masked sum on the inner global domain of a 1D array
   71.          !!-----------------------------------------------------------------------
   72.          INTEGER :: kdim
   73.          REAL(wp), INTENT(in), DIMENSION(kdim) ::   ptab        ! input 1D array
   74.          REAL(wp)                              ::   glob_sum_1d ! global sum
   75.          !!-----------------------------------------------------------------------
   76.          !
   77.          glob_sum_1d = SUM( ptab(:) )
ftn-6263 ftn: VECTOR File = lib_fortran.f90, Line = 77 
  A loop starting at line 77 was not vectorized because it contains a reference to a non-vector intrinsic on line 77.

   78.          IF( lk_mpp )   CALL mpp_sum( glob_sum_1d )
   79.          !
   80.       END FUNCTION glob_sum_1d
   81.    
   82.       FUNCTION glob_sum_2d( ptab )
   83.          !!-----------------------------------------------------------------------
   84.          !!                  ***  FUNCTION  glob_sum_2D  ***
   85.          !!
   86.          !! ** Purpose : perform a masked sum on the inner global domain of a 2D array
   87.          !!-----------------------------------------------------------------------
   88.          REAL(wp), INTENT(in), DIMENSION(:,:) ::   ptab          ! input 2D array
   89.          REAL(wp)                             ::   glob_sum_2d   ! global masked sum
   90.          !!-----------------------------------------------------------------------
   91.          !
   92.          glob_sum_2d = SUM( ptab(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 92 
  A loop starting at line 92 was not vectorized because it contains a call to a subroutine or function on line 92.

   93.          IF( lk_mpp )   CALL mpp_sum( glob_sum_2d )
   94.          !
   95.       END FUNCTION glob_sum_2d
   96.    
   97.    
   98.       FUNCTION glob_sum_3d( ptab )
   99.          !!-----------------------------------------------------------------------
  100.          !!                  ***  FUNCTION  glob_sum_3D  ***
  101.          !!
  102.          !! ** Purpose : perform a masked sum on the inner global domain of a 3D array
  103.          !!-----------------------------------------------------------------------
  104.          REAL(wp), INTENT(in), DIMENSION(:,:,:) ::   ptab          ! input 3D array
  105.          REAL(wp)                               ::   glob_sum_3d   ! global masked sum
  106.          !!
  107.          INTEGER :: jk
  108.          INTEGER :: ijpk ! local variable: size of the 3d dimension of ptab
  109.          !!-----------------------------------------------------------------------
  110.          !
  111.          ijpk = SIZE(ptab,3)
  112.          !
  113.          glob_sum_3d = 0.e0
  114.          DO jk = 1, ijpk
  115.             glob_sum_3d = glob_sum_3d + SUM( ptab(:,:,jk)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 115 
  A loop starting at line 115 was not vectorized because it contains a call to a subroutine or function on line 115.

  116.          END DO
  117.          IF( lk_mpp )   CALL mpp_sum( glob_sum_3d )
  118.          !
  119.       END FUNCTION glob_sum_3d
  120.    
  121.    
  122.       FUNCTION glob_sum_2d_a( ptab1, ptab2 )
  123.          !!-----------------------------------------------------------------------
  124.          !!                  ***  FUNCTION  glob_sum_2D _a ***
  125.          !!
  126.          !! ** Purpose : perform a masked sum on the inner global domain of two 2D array
  127.          !!-----------------------------------------------------------------------
  128.          REAL(wp), INTENT(in), DIMENSION(:,:) ::   ptab1, ptab2    ! input 2D array
  129.          REAL(wp)            , DIMENSION(2)   ::   glob_sum_2d_a   ! global masked sum
  130.          !!-----------------------------------------------------------------------
  131.          !
  132.          glob_sum_2d_a(1) = SUM( ptab1(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 132 
  A loop starting at line 132 was not vectorized because it contains a call to a subroutine or function on line 132.

  133.          glob_sum_2d_a(2) = SUM( ptab2(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 133 
  A loop starting at line 133 was not vectorized because it contains a call to a subroutine or function on line 133.

  134.          IF( lk_mpp )   CALL mpp_sum( glob_sum_2d_a, 2 )
  135.          !
  136.       END FUNCTION glob_sum_2d_a
  137.    
  138.    
  139.       FUNCTION glob_sum_3d_a( ptab1, ptab2 )
  140.          !!-----------------------------------------------------------------------
  141.          !!                  ***  FUNCTION  glob_sum_3D_a ***
  142.          !!
  143.          !! ** Purpose : perform a masked sum on the inner global domain of two 3D array
  144.          !!-----------------------------------------------------------------------
  145.          REAL(wp), INTENT(in), DIMENSION(:,:,:) ::   ptab1, ptab2    ! input 3D array
  146.          REAL(wp)            , DIMENSION(2)     ::   glob_sum_3d_a   ! global masked sum
  147.          !!
  148.          INTEGER :: jk
  149.          INTEGER :: ijpk ! local variable: size of the 3d dimension of ptab
  150.          !!-----------------------------------------------------------------------
  151.          !
  152.          ijpk = SIZE(ptab1,3)
  153.          !
  154.          glob_sum_3d_a(:) = 0.e0
ftn-6205 ftn: VECTOR File = lib_fortran.f90, Line = 154 
  A loop starting at line 154 was vectorized with a single vector iteration.

  155.          DO jk = 1, ijpk
  156.             glob_sum_3d_a(1) = glob_sum_3d_a(1) + SUM( ptab1(:,:,jk)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 156 
  A loop starting at line 156 was not vectorized because it contains a call to a subroutine or function on line 156.

  157.             glob_sum_3d_a(2) = glob_sum_3d_a(2) + SUM( ptab2(:,:,jk)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 157 
  A loop starting at line 157 was not vectorized because it contains a call to a subroutine or function on line 157.

  158.          END DO
  159.          IF( lk_mpp )   CALL mpp_sum( glob_sum_3d_a, 2 )
  160.          !
  161.       END FUNCTION glob_sum_3d_a
  162.    
  163.       FUNCTION glob_sum_full_2d( ptab )
  164.          !!----------------------------------------------------------------------
  165.          !!                  ***  FUNCTION  glob_sum_full_2d ***
  166.          !!
  167.          !! ** Purpose : perform a sum in calling DDPDD routine (nomask)
  168.          !!----------------------------------------------------------------------
  169.          REAL(wp), INTENT(in), DIMENSION(:,:) ::   ptab
  170.          REAL(wp)                             ::   glob_sum_full_2d   ! global sum
  171.          !!
  172.          !!-----------------------------------------------------------------------
  173.          !
  174.          glob_sum_full_2d = SUM( ptab(:,:) * tmask_h(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 174 
  A loop starting at line 174 was not vectorized because it contains a call to a subroutine or function on line 174.

  175.          IF( lk_mpp )   CALL mpp_sum( glob_sum_full_2d )
  176.          !
  177.       END FUNCTION glob_sum_full_2d
  178.    
  179.       FUNCTION glob_sum_full_3d( ptab )
  180.          !!----------------------------------------------------------------------
  181.          !!                  ***  FUNCTION  glob_sum_full_3d ***
  182.          !!
  183.          !! ** Purpose : perform a sum on a 3D array in calling DDPDD routine (nomask)
  184.          !!----------------------------------------------------------------------
  185.          REAL(wp), INTENT(in), DIMENSION(:,:,:) ::   ptab
  186.          REAL(wp)                               ::   glob_sum_full_3d   ! global sum
  187.          !!
  188.          INTEGER    ::   ji, jj, jk   ! dummy loop indices
  189.          INTEGER    ::   ijpk ! local variables: size of ptab
  190.          !!-----------------------------------------------------------------------
  191.          !
  192.          ijpk = SIZE(ptab,3)
  193.          !
  194.          glob_sum_full_3d = 0.e0
  195.          DO jk = 1, ijpk
  196.             glob_sum_full_3d = glob_sum_full_3d + SUM( ptab(:,:,jk) * tmask_h(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 196 
  A loop starting at line 196 was not vectorized because it contains a call to a subroutine or function on line 196.

  197.          END DO
  198.          IF( lk_mpp )   CALL mpp_sum( glob_sum_full_3d )
  199.          !
  200.       END FUNCTION glob_sum_full_3d
ftn-5002 ftn: NOTE File = lib_fortran.f90, Line = 200 
  Local variable "JI" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = lib_fortran.f90, Line = 200 
  Local variable "JJ" is declared but neither defined nor used.

  201.    
  202.    
  203.    
  204.       ! --- MIN ---
  205.       FUNCTION glob_min_2d( ptab ) 
  206.          !!-----------------------------------------------------------------------
  207.          !!                  ***  FUNCTION  glob_min_2D  ***
  208.          !!
  209.          !! ** Purpose : perform a masked min on the inner global domain of a 2D array
  210.          !!-----------------------------------------------------------------------
  211.          REAL(wp), INTENT(in), DIMENSION(:,:) ::   ptab          ! input 2D array
  212.          REAL(wp)                             ::   glob_min_2d   ! global masked min
  213.          !!-----------------------------------------------------------------------
  214.          !
  215.          glob_min_2d = MINVAL( ptab(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 215 
  A loop starting at line 215 was not vectorized because it contains a call to a subroutine or function on line 215.

  216.          IF( lk_mpp )   CALL mpp_min( glob_min_2d )
  217.          !
  218.       END FUNCTION glob_min_2d
  219.     
  220.       FUNCTION glob_min_3d( ptab ) 
  221.          !!-----------------------------------------------------------------------
  222.          !!                  ***  FUNCTION  glob_min_3D  ***
  223.          !!
  224.          !! ** Purpose : perform a masked min on the inner global domain of a 3D array
  225.          !!-----------------------------------------------------------------------
  226.          REAL(wp), INTENT(in), DIMENSION(:,:,:) ::   ptab          ! input 3D array
  227.          REAL(wp)                               ::   glob_min_3d   ! global masked min
  228.          !!
  229.          INTEGER :: jk
  230.          INTEGER :: ijpk ! local variable: size of the 3d dimension of ptab
  231.          !!-----------------------------------------------------------------------
  232.          !
  233.          ijpk = SIZE(ptab,3)
  234.          !
  235.          glob_min_3d = MINVAL( ptab(:,:,1)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 235 
  A loop starting at line 235 was not vectorized because it contains a call to a subroutine or function on line 235.

  236.          DO jk = 2, ijpk
  237.             glob_min_3d = MIN( glob_min_3d, MINVAL( ptab(:,:,jk)*tmask_i(:,:) ) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 237 
  A loop starting at line 237 was not vectorized because it contains a call to a subroutine or function on line 237.

  238.          END DO
  239.          IF( lk_mpp )   CALL mpp_min( glob_min_3d )
  240.          !
  241.       END FUNCTION glob_min_3d
  242.    
  243.    
  244.       FUNCTION glob_min_2d_a( ptab1, ptab2 ) 
  245.          !!-----------------------------------------------------------------------
  246.          !!                  ***  FUNCTION  glob_min_2D _a ***
  247.          !!
  248.          !! ** Purpose : perform a masked min on the inner global domain of two 2D array
  249.          !!-----------------------------------------------------------------------
  250.          REAL(wp), INTENT(in), DIMENSION(:,:) ::   ptab1, ptab2    ! input 2D array
  251.          REAL(wp)            , DIMENSION(2)   ::   glob_min_2d_a   ! global masked min
  252.          !!-----------------------------------------------------------------------
  253.          !             
  254.          glob_min_2d_a(1) = MINVAL( ptab1(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 254 
  A loop starting at line 254 was not vectorized because it contains a call to a subroutine or function on line 254.

  255.          glob_min_2d_a(2) = MINVAL( ptab2(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 255 
  A loop starting at line 255 was not vectorized because it contains a call to a subroutine or function on line 255.

  256.          IF( lk_mpp )   CALL mpp_min( glob_min_2d_a, 2 )
  257.          !
  258.       END FUNCTION glob_min_2d_a
  259.     
  260.     
  261.       FUNCTION glob_min_3d_a( ptab1, ptab2 ) 
  262.          !!-----------------------------------------------------------------------
  263.          !!                  ***  FUNCTION  glob_min_3D_a ***
  264.          !!
  265.          !! ** Purpose : perform a masked min on the inner global domain of two 3D array
  266.          !!-----------------------------------------------------------------------
  267.          REAL(wp), INTENT(in), DIMENSION(:,:,:) ::   ptab1, ptab2    ! input 3D array
  268.          REAL(wp)            , DIMENSION(2)     ::   glob_min_3d_a   ! global masked min
  269.          !!
  270.          INTEGER :: jk
  271.          INTEGER :: ijpk ! local variable: size of the 3d dimension of ptab
  272.          !!-----------------------------------------------------------------------
  273.          !
  274.          ijpk = SIZE(ptab1,3)
  275.          !
  276.          glob_min_3d_a(1) = MINVAL( ptab1(:,:,1)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 276 
  A loop starting at line 276 was not vectorized because it contains a call to a subroutine or function on line 276.

  277.          glob_min_3d_a(2) = MINVAL( ptab2(:,:,1)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 277 
  A loop starting at line 277 was not vectorized because it contains a call to a subroutine or function on line 277.

  278.          DO jk = 2, ijpk
  279.             glob_min_3d_a(1) = MIN( glob_min_3d_a(1), MINVAL( ptab1(:,:,jk)*tmask_i(:,:) ) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 279 
  A loop starting at line 279 was not vectorized because it contains a call to a subroutine or function on line 279.

  280.             glob_min_3d_a(2) = MIN( glob_min_3d_a(2), MINVAL( ptab2(:,:,jk)*tmask_i(:,:) ) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 280 
  A loop starting at line 280 was not vectorized because it contains a call to a subroutine or function on line 280.

  281.          END DO
  282.          IF( lk_mpp )   CALL mpp_min( glob_min_3d_a, 2 )
  283.          !
  284.       END FUNCTION glob_min_3d_a
  285.    
  286.       ! --- MAX ---
  287.       FUNCTION glob_max_2d( ptab ) 
  288.          !!-----------------------------------------------------------------------
  289.          !!                  ***  FUNCTION  glob_max_2D  ***
  290.          !!
  291.          !! ** Purpose : perform a masked max on the inner global domain of a 2D array
  292.          !!-----------------------------------------------------------------------
  293.          REAL(wp), INTENT(in), DIMENSION(:,:) ::   ptab          ! input 2D array
  294.          REAL(wp)                             ::   glob_max_2d   ! global masked max
  295.          !!-----------------------------------------------------------------------
  296.          !
  297.          glob_max_2d = MAXVAL( ptab(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 297 
  A loop starting at line 297 was not vectorized because it contains a call to a subroutine or function on line 297.

  298.          IF( lk_mpp )   CALL mpp_max( glob_max_2d )
  299.          !
  300.       END FUNCTION glob_max_2d
  301.     
  302.       FUNCTION glob_max_3d( ptab ) 
  303.          !!-----------------------------------------------------------------------
  304.          !!                  ***  FUNCTION  glob_max_3D  ***
  305.          !!
  306.          !! ** Purpose : perform a masked max on the inner global domain of a 3D array
  307.          !!-----------------------------------------------------------------------
  308.          REAL(wp), INTENT(in), DIMENSION(:,:,:) ::   ptab          ! input 3D array
  309.          REAL(wp)                               ::   glob_max_3d   ! global masked max
  310.          !!
  311.          INTEGER :: jk
  312.          INTEGER :: ijpk ! local variable: size of the 3d dimension of ptab
  313.          !!-----------------------------------------------------------------------
  314.          !
  315.          ijpk = SIZE(ptab,3)
  316.          !
  317.          glob_max_3d = MAXVAL( ptab(:,:,1)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 317 
  A loop starting at line 317 was not vectorized because it contains a call to a subroutine or function on line 317.

  318.          DO jk = 2, ijpk
  319.             glob_max_3d = MAX( glob_max_3d, MAXVAL( ptab(:,:,jk)*tmask_i(:,:) ) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 319 
  A loop starting at line 319 was not vectorized because it contains a call to a subroutine or function on line 319.

  320.          END DO
  321.          IF( lk_mpp )   CALL mpp_max( glob_max_3d )
  322.          !
  323.       END FUNCTION glob_max_3d
  324.    
  325.    
  326.       FUNCTION glob_max_2d_a( ptab1, ptab2 ) 
  327.          !!-----------------------------------------------------------------------
  328.          !!                  ***  FUNCTION  glob_max_2D _a ***
  329.          !!
  330.          !! ** Purpose : perform a masked max on the inner global domain of two 2D array
  331.          !!-----------------------------------------------------------------------
  332.          REAL(wp), INTENT(in), DIMENSION(:,:) ::   ptab1, ptab2    ! input 2D array
  333.          REAL(wp)            , DIMENSION(2)   ::   glob_max_2d_a   ! global masked max
  334.          !!-----------------------------------------------------------------------
  335.          !             
  336.          glob_max_2d_a(1) = MAXVAL( ptab1(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 336 
  A loop starting at line 336 was not vectorized because it contains a call to a subroutine or function on line 336.

  337.          glob_max_2d_a(2) = MAXVAL( ptab2(:,:)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 337 
  A loop starting at line 337 was not vectorized because it contains a call to a subroutine or function on line 337.

  338.          IF( lk_mpp )   CALL mpp_max( glob_max_2d_a, 2 )
  339.          !
  340.       END FUNCTION glob_max_2d_a
  341.     
  342.     
  343.       FUNCTION glob_max_3d_a( ptab1, ptab2 ) 
  344.          !!-----------------------------------------------------------------------
  345.          !!                  ***  FUNCTION  glob_max_3D_a ***
  346.          !!
  347.          !! ** Purpose : perform a masked max on the inner global domain of two 3D array
  348.          !!-----------------------------------------------------------------------
  349.          REAL(wp), INTENT(in), DIMENSION(:,:,:) ::   ptab1, ptab2    ! input 3D array
  350.          REAL(wp)            , DIMENSION(2)     ::   glob_max_3d_a   ! global masked max
  351.          !!
  352.          INTEGER :: jk
  353.          INTEGER :: ijpk ! local variable: size of the 3d dimension of ptab
  354.          !!-----------------------------------------------------------------------
  355.          !
  356.          ijpk = SIZE(ptab1,3)
  357.          !
  358.          glob_max_3d_a(1) = MAXVAL( ptab1(:,:,1)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 358 
  A loop starting at line 358 was not vectorized because it contains a call to a subroutine or function on line 358.

  359.          glob_max_3d_a(2) = MAXVAL( ptab2(:,:,1)*tmask_i(:,:) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 359 
  A loop starting at line 359 was not vectorized because it contains a call to a subroutine or function on line 359.

  360.          DO jk = 2, ijpk
  361.             glob_max_3d_a(1) = MAX( glob_max_3d_a(1), MAXVAL( ptab1(:,:,jk)*tmask_i(:,:) ) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 361 
  A loop starting at line 361 was not vectorized because it contains a call to a subroutine or function on line 361.

  362.             glob_max_3d_a(2) = MAX( glob_max_3d_a(2), MAXVAL( ptab2(:,:,jk)*tmask_i(:,:) ) )
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 362 
  A loop starting at line 362 was not vectorized because it contains a call to a subroutine or function on line 362.

  363.          END DO
  364.          IF( lk_mpp )   CALL mpp_max( glob_max_3d_a, 2 )
  365.          !
  366.       END FUNCTION glob_max_3d_a
  367.    
  368.    
  369.       SUBROUTINE DDPDD( ydda, yddb )
  370.          !!----------------------------------------------------------------------
  371.          !!               ***  ROUTINE DDPDD ***
  372.          !!
  373.          !! ** Purpose : Add a scalar element to a sum
  374.          !!
  375.          !!
  376.          !! ** Method  : The code uses the compensated summation with doublet
  377.          !!              (sum,error) emulated useing complex numbers. ydda is the
  378.          !!               scalar to add to the summ yddb
  379.          !!
  380.          !! ** Action  : This does only work for MPI.
  381.          !!
  382.          !! References : Using Acurate Arithmetics to Improve Numerical
  383.          !!              Reproducibility and Sability in Parallel Applications
  384.          !!              Yun HE and Chris H. Q. DING, Journal of Supercomputing 18, 259-277, 2001
  385.          !!----------------------------------------------------------------------
  386.          COMPLEX(wp), INTENT(in   ) ::   ydda
  387.          COMPLEX(wp), INTENT(inout) ::   yddb
  388.          !
  389.          REAL(wp) :: zerr, zt1, zt2  ! local work variables
  390.          !!-----------------------------------------------------------------------
  391.          !
  392.          ! Compute ydda + yddb using Knuth's trick.
  393.          zt1  = REAL(ydda) + REAL(yddb)
  394.          zerr = zt1 - REAL(ydda)
  395.          zt2  = ( (REAL(yddb) - zerr) + (REAL(ydda) - (zt1 - zerr)) )   &
  396.             &   + AIMAG(ydda)         + AIMAG(yddb)
  397.          !
  398.          ! The result is t1 + t2, after normalization.
  399.          yddb = CMPLX( zt1 + zt2, zt2 - ((zt1 + zt2) - zt1), wp )
  400.          !
  401.       END SUBROUTINE DDPDD
  402.    
  403.       !!----------------------------------------------------------------------
  404.       !!   'key_nosignedzero'                                         F90 SIGN
  405.       !!----------------------------------------------------------------------
  406.    
  407.       FUNCTION SIGN_SCALAR( pa, pb )
  408.          !!-----------------------------------------------------------------------
  409.          !!                  ***  FUNCTION SIGN_SCALAR  ***
  410.          !!
  411.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  412.          !!-----------------------------------------------------------------------
  413.          REAL(wp) :: pa,pb          ! input
  414.          REAL(wp) :: SIGN_SCALAR    ! result
  415.          !!-----------------------------------------------------------------------
  416.          IF ( pb >= 0.e0) THEN   ;   SIGN_SCALAR = ABS(pa)
  417.          ELSE                    ;   SIGN_SCALAR =-ABS(pa)
  418.          ENDIF
  419.       END FUNCTION SIGN_SCALAR
  420.    
  421.    
  422.       FUNCTION SIGN_ARRAY_1D( pa, pb )
  423.          !!-----------------------------------------------------------------------
  424.          !!                  ***  FUNCTION SIGN_ARRAY_1D  ***
  425.          !!
  426.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  427.          !!-----------------------------------------------------------------------
  428.          REAL(wp) :: pa,pb(:)                   ! input
  429.          REAL(wp) :: SIGN_ARRAY_1D(SIZE(pb,1))  ! result
  430.          !!-----------------------------------------------------------------------
  431.          WHERE ( pb >= 0.e0 )   ;   SIGN_ARRAY_1D = ABS(pa)
ftn-6332 ftn: VECTOR File = lib_fortran.f90, Line = 431 
  A loop starting at line 431 was not vectorized because it does not map well onto the target architecture.

  432.          ELSEWHERE              ;   SIGN_ARRAY_1D =-ABS(pa)
ftn-6332 ftn: VECTOR File = lib_fortran.f90, Line = 432 
  A loop starting at line 432 was not vectorized because it does not map well onto the target architecture.

  433.          END WHERE
  434.       END FUNCTION SIGN_ARRAY_1D
  435.    
  436.    
  437.       FUNCTION SIGN_ARRAY_2D(pa,pb)
  438.          !!-----------------------------------------------------------------------
  439.          !!                  ***  FUNCTION SIGN_ARRAY_2D  ***
  440.          !!
  441.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  442.          !!-----------------------------------------------------------------------
  443.          REAL(wp) :: pa,pb(:,:)      ! input
  444.          REAL(wp) :: SIGN_ARRAY_2D(SIZE(pb,1),SIZE(pb,2))  ! result
  445.          !!-----------------------------------------------------------------------
  446.          WHERE ( pb >= 0.e0 )   ;   SIGN_ARRAY_2D = ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 446 
  A loop starting at line 446 was not vectorized because it contains a call to a subroutine or function on line 446.

  447.          ELSEWHERE              ;   SIGN_ARRAY_2D =-ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 447 
  A loop starting at line 447 was not vectorized because it contains a call to a subroutine or function on line 447.

  448.          END WHERE
  449.       END FUNCTION SIGN_ARRAY_2D
  450.    
  451.       FUNCTION SIGN_ARRAY_3D(pa,pb)
  452.          !!-----------------------------------------------------------------------
  453.          !!                  ***  FUNCTION SIGN_ARRAY_3D  ***
  454.          !!
  455.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  456.          !!-----------------------------------------------------------------------
  457.          REAL(wp) :: pa,pb(:,:,:)      ! input
  458.          REAL(wp) :: SIGN_ARRAY_3D(SIZE(pb,1),SIZE(pb,2),SIZE(pb,3))  ! result
  459.          !!-----------------------------------------------------------------------
  460.          WHERE ( pb >= 0.e0 )   ;   SIGN_ARRAY_3D = ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 460 
  A loop starting at line 460 was not vectorized because it contains a call to a subroutine or function on line 460.

  461.          ELSEWHERE              ;   SIGN_ARRAY_3D =-ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 461 
  A loop starting at line 461 was not vectorized because it contains a call to a subroutine or function on line 461.

  462.          END WHERE
  463.       END FUNCTION SIGN_ARRAY_3D
  464.    
  465.    
  466.       FUNCTION SIGN_ARRAY_1D_A(pa,pb)
  467.          !!-----------------------------------------------------------------------
  468.          !!                  ***  FUNCTION SIGN_ARRAY_1D_A  ***
  469.          !!
  470.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  471.          !!-----------------------------------------------------------------------
  472.          REAL(wp) :: pa(:),pb(:)      ! input
  473.          REAL(wp) :: SIGN_ARRAY_1D_A(SIZE(pb,1))  ! result
  474.          !!-----------------------------------------------------------------------
  475.          WHERE ( pb >= 0.e0 )   ;   SIGN_ARRAY_1D_A = ABS(pa)
ftn-6332 ftn: VECTOR File = lib_fortran.f90, Line = 475 
  A loop starting at line 475 was not vectorized because it does not map well onto the target architecture.

  476.          ELSEWHERE              ;   SIGN_ARRAY_1D_A =-ABS(pa)
ftn-6332 ftn: VECTOR File = lib_fortran.f90, Line = 476 
  A loop starting at line 476 was not vectorized because it does not map well onto the target architecture.

  477.          END WHERE
  478.       END FUNCTION SIGN_ARRAY_1D_A
  479.    
  480.    
  481.       FUNCTION SIGN_ARRAY_2D_A(pa,pb)
  482.          !!-----------------------------------------------------------------------
  483.          !!                  ***  FUNCTION SIGN_ARRAY_2D_A  ***
  484.          !!
  485.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  486.          !!-----------------------------------------------------------------------
  487.          REAL(wp) :: pa(:,:),pb(:,:)      ! input
  488.          REAL(wp) :: SIGN_ARRAY_2D_A(SIZE(pb,1),SIZE(pb,2))  ! result
  489.          !!-----------------------------------------------------------------------
  490.          WHERE ( pb >= 0.e0 )   ;   SIGN_ARRAY_2D_A = ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 490 
  A loop starting at line 490 was not vectorized because it contains a call to a subroutine or function on line 490.

  491.          ELSEWHERE              ;   SIGN_ARRAY_2D_A =-ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 491 
  A loop starting at line 491 was not vectorized because it contains a call to a subroutine or function on line 491.

  492.          END WHERE
  493.       END FUNCTION SIGN_ARRAY_2D_A
  494.    
  495.    
  496.       FUNCTION SIGN_ARRAY_3D_A(pa,pb)
  497.          !!-----------------------------------------------------------------------
  498.          !!                  ***  FUNCTION SIGN_ARRAY_3D_A  ***
  499.          !!
  500.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  501.          !!-----------------------------------------------------------------------
  502.          REAL(wp) :: pa(:,:,:),pb(:,:,:)  ! input
  503.          REAL(wp) :: SIGN_ARRAY_3D_A(SIZE(pb,1),SIZE(pb,2),SIZE(pb,3)) ! result
  504.          !!-----------------------------------------------------------------------
  505.          WHERE ( pb >= 0.e0 )   ;   SIGN_ARRAY_3D_A = ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 505 
  A loop starting at line 505 was not vectorized because it contains a call to a subroutine or function on line 505.

  506.          ELSEWHERE              ;   SIGN_ARRAY_3D_A =-ABS(pa)
ftn-6262 ftn: VECTOR File = lib_fortran.f90, Line = 506 
  A loop starting at line 506 was not vectorized because it contains a call to a subroutine or function on line 506.

  507.          END WHERE
  508.       END FUNCTION SIGN_ARRAY_3D_A
  509.    
  510.    
  511.       FUNCTION SIGN_ARRAY_1D_B(pa,pb)
  512.          !!-----------------------------------------------------------------------
  513.          !!                  ***  FUNCTION SIGN_ARRAY_1D_B  ***
  514.          !!
  515.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  516.          !!-----------------------------------------------------------------------
  517.          REAL(wp) :: pa(:),pb      ! input
  518.          REAL(wp) :: SIGN_ARRAY_1D_B(SIZE(pa,1))  ! result
  519.          !!-----------------------------------------------------------------------
  520.          IF( pb >= 0.e0 ) THEN   ;   SIGN_ARRAY_1D_B = ABS(pa)
ftn-6209 ftn: VECTOR File = lib_fortran.f90, Line = 520 
  A loop starting at line 520 was partially vectorized.

  521.          ELSE                    ;   SIGN_ARRAY_1D_B =-ABS(pa)
ftn-6209 ftn: VECTOR File = lib_fortran.f90, Line = 521 
  A loop starting at line 521 was partially vectorized.

  522.          ENDIF
  523.       END FUNCTION SIGN_ARRAY_1D_B
  524.    
  525.    
  526.       FUNCTION SIGN_ARRAY_2D_B(pa,pb)
  527.          !!-----------------------------------------------------------------------
  528.          !!                  ***  FUNCTION SIGN_ARRAY_2D_B  ***
  529.          !!
  530.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  531.          !!-----------------------------------------------------------------------
  532.          REAL(wp) :: pa(:,:),pb      ! input
  533.          REAL(wp) :: SIGN_ARRAY_2D_B(SIZE(pa,1),SIZE(pa,2))  ! result
  534.          !!-----------------------------------------------------------------------
  535.          IF( pb >= 0.e0 ) THEN   ;   SIGN_ARRAY_2D_B = ABS(pa)
ftn-6209 ftn: VECTOR File = lib_fortran.f90, Line = 535 
  A loop starting at line 535 was partially vectorized.

  536.          ELSE                    ;   SIGN_ARRAY_2D_B =-ABS(pa)
ftn-6209 ftn: VECTOR File = lib_fortran.f90, Line = 536 
  A loop starting at line 536 was partially vectorized.

  537.          ENDIF
  538.       END FUNCTION SIGN_ARRAY_2D_B
  539.    
  540.    
  541.       FUNCTION SIGN_ARRAY_3D_B(pa,pb)
  542.          !!-----------------------------------------------------------------------
  543.          !!                  ***  FUNCTION SIGN_ARRAY_3D_B  ***
  544.          !!
  545.          !! ** Purpose : overwrite f95 behaviour of intrinsinc sign function
  546.          !!-----------------------------------------------------------------------
  547.          REAL(wp) :: pa(:,:,:),pb      ! input
  548.          REAL(wp) :: SIGN_ARRAY_3D_B(SIZE(pa,1),SIZE(pa,2),SIZE(pa,3))  ! result
  549.          !!-----------------------------------------------------------------------
  550.          IF( pb >= 0.e0 ) THEN   ;   SIGN_ARRAY_3D_B = ABS(pa)
ftn-6209 ftn: VECTOR File = lib_fortran.f90, Line = 550 
  A loop starting at line 550 was partially vectorized.

  551.          ELSE                    ;   SIGN_ARRAY_3D_B =-ABS(pa)
ftn-6209 ftn: VECTOR File = lib_fortran.f90, Line = 551 
  A loop starting at line 551 was partially vectorized.

  552.          ENDIF
  553.       END FUNCTION SIGN_ARRAY_3D_B
  554.    
  555.       !!======================================================================
  556.    END MODULE lib_fortran


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SIGN_SCALAR in LIB_FORTRAN (Line 416, file lib_fortran.f90)
                   SIGN_SCALAR in LIB_FORTRAN (Line 417, file lib_fortran.f90)
                   SIGN_ARRAY_1D in LIB_FORTRAN (Line 431, file lib_fortran.f90)
                   SIGN_ARRAY_1D in LIB_FORTRAN (Line 432, file lib_fortran.f90)
                   SIGN_ARRAY_2D in LIB_FORTRAN (Line 446, file lib_fortran.f90)
                   SIGN_ARRAY_2D in LIB_FORTRAN (Line 447, file lib_fortran.f90)
                   SIGN_ARRAY_3D in LIB_FORTRAN (Line 460, file lib_fortran.f90)
                   SIGN_ARRAY_3D in LIB_FORTRAN (Line 461, file lib_fortran.f90)
                   SIGN_ARRAY_1D_A in LIB_FORTRAN (Line 475, file lib_fortran.f90)
                   SIGN_ARRAY_1D_A in LIB_FORTRAN (Line 476, file lib_fortran.f90)
                   SIGN_ARRAY_2D_A in LIB_FORTRAN (Line 490, file lib_fortran.f90)
                   SIGN_ARRAY_2D_A in LIB_FORTRAN (Line 491, file lib_fortran.f90)
                   SIGN_ARRAY_3D_A in LIB_FORTRAN (Line 505, file lib_fortran.f90)
                   SIGN_ARRAY_3D_A in LIB_FORTRAN (Line 506, file lib_fortran.f90)
                   SIGN_ARRAY_1D_B in LIB_FORTRAN (Line 520, file lib_fortran.f90)
                   SIGN_ARRAY_1D_B in LIB_FORTRAN (Line 521, file lib_fortran.f90)
                   SIGN_ARRAY_2D_B in LIB_FORTRAN (Line 535, file lib_fortran.f90)
                   SIGN_ARRAY_2D_B in LIB_FORTRAN (Line 536, file lib_fortran.f90)
                   SIGN_ARRAY_3D_B in LIB_FORTRAN (Line 550, file lib_fortran.f90)
                   SIGN_ARRAY_3D_B in LIB_FORTRAN (Line 551, file lib_fortran.f90)

Name  Messages
----  --------
AGRIF_CFIXED in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
AGRIF_ROOT in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
AIMAG(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   DDPDD in LIB_FORTRAN (Line 396, file lib_fortran.f90)
                   DDPDD in LIB_FORTRAN (Line 396, file lib_fortran.f90)

Name  Messages
----  --------
CMPLX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   DDPDD in LIB_FORTRAN (Line 399, file lib_fortran.f90)

Name  Messages
----  --------
CTL_NAM in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_OPN in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_STOP in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CTL_WARN in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DDPDD in LIB_FORTRAN
      Defined as:  Subroutine (line 28, file lib_fortran.f90)

      Interface:   None

      Calls:       REAL(Intrinsic) (Line 393, file lib_fortran.f90)
                   REAL(Intrinsic) (Line 393, file lib_fortran.f90)
                   REAL(Intrinsic) (Line 394, file lib_fortran.f90)
                   REAL(Intrinsic) (Line 395, file lib_fortran.f90)
                   REAL(Intrinsic) (Line 395, file lib_fortran.f90)
                   AIMAG(Intrinsic) (Line 396, file lib_fortran.f90)
                   AIMAG(Intrinsic) (Line 396, file lib_fortran.f90)
                   CMPLX(Intrinsic) (Line 399, file lib_fortran.f90)

Name  Messages
----  --------
DOM_OCE
      Defined as:  No definitions.

      Used By:     LIB_FORTRAN
                   LIB_FORTRAN  (indirectly)

Name  Messages
----  --------
DOM_OCE_ALLOC in DOM_OCE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GET_NF90_SYMBOL in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GET_UNIT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GLOB_MAX_2D in LIB_FORTRAN
      Defined as:  Function (line 287, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMAX_REAL in LIB_MPP (Line 298, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 297, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_MAX_2D_A in LIB_FORTRAN
      Defined as:  Function (line 326, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMAX_A_REAL in LIB_MPP (Line 338, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 336, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 337, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_MAX_3D in LIB_FORTRAN
      Defined as:  Function (line 302, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMAX_REAL in LIB_MPP (Line 321, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 315, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 317, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 319, file lib_fortran.f90)
                   MAX(Intrinsic) (Line 319, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_MAX_3D_A in LIB_FORTRAN
      Defined as:  Function (line 343, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMAX_A_REAL in LIB_MPP (Line 364, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 356, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 358, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 359, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 361, file lib_fortran.f90)
                   MAXVAL(Intrinsic) (Line 362, file lib_fortran.f90)
                   MAX(Intrinsic) (Line 361, file lib_fortran.f90)
                   MAX(Intrinsic) (Line 362, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_MIN_2D in LIB_FORTRAN
      Defined as:  Function (line 205, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMIN_REAL in LIB_MPP (Line 216, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 215, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_MIN_2D_A in LIB_FORTRAN
      Defined as:  Function (line 244, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMIN_A_REAL in LIB_MPP (Line 256, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 254, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 255, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_MIN_3D in LIB_FORTRAN
      Defined as:  Function (line 220, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMIN_REAL in LIB_MPP (Line 239, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 233, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 235, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 237, file lib_fortran.f90)
                   MIN(Intrinsic) (Line 237, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_MIN_3D_A in LIB_FORTRAN
      Defined as:  Function (line 261, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPMIN_A_REAL in LIB_MPP (Line 282, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 274, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 276, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 277, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 279, file lib_fortran.f90)
                   MINVAL(Intrinsic) (Line 280, file lib_fortran.f90)
                   MIN(Intrinsic) (Line 279, file lib_fortran.f90)
                   MIN(Intrinsic) (Line 280, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_SUM_1D in LIB_FORTRAN
      Defined as:  Function (line 66, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPSUM_REAL in LIB_MPP (Line 78, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 77, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_SUM_2D in LIB_FORTRAN
      Defined as:  Function (line 82, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPSUM_REAL in LIB_MPP (Line 93, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 92, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_SUM_2D_A in LIB_FORTRAN
      Defined as:  Function (line 122, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPSUM_A_REAL in LIB_MPP (Line 134, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 132, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 133, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_SUM_3D in LIB_FORTRAN
      Defined as:  Function (line 98, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPSUM_REAL in LIB_MPP (Line 117, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 111, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 115, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_SUM_3D_A in LIB_FORTRAN
      Defined as:  Function (line 139, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPSUM_A_REAL in LIB_MPP (Line 159, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 152, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 156, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 157, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_SUM_FULL_2D in LIB_FORTRAN
      Defined as:  Function (line 163, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPSUM_REAL in LIB_MPP (Line 175, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 174, file lib_fortran.f90)

Name  Messages
----  --------
GLOB_SUM_FULL_3D in LIB_FORTRAN
      Defined as:  Function (line 179, file lib_fortran.f90)

      Interface:   None

      Calls:       MPPSUM_REAL in LIB_MPP (Line 198, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 192, file lib_fortran.f90)
                   SUM(Intrinsic) (Line 196, file lib_fortran.f90)

Name  Messages
----  --------
IN_OUT_MANAGER
      Defined as:  No definitions.

      Used By:     LIB_FORTRAN

Name  Messages
----  --------
LIB_FORTRAN
      Defined as:  Module (line 1, file lib_fortran.f90)

        Uses:      PAR_KIND  (indirectly)
                   DOM_OCE
                   PAR_KIND  (indirectly)
                   PAR_OCE  (indirectly)
                   IN_OUT_MANAGER
                   PAR_KIND  (indirectly)
                   NC4INTERFACE  (indirectly)
                   PAR_OCE  (indirectly)
                   LIB_MPP
                   PAR_OCE  (indirectly)
                   DOM_OCE  (indirectly)

Name  Messages
----  --------
LIB_MPP
      Defined as:  No definitions.

      Used By:     LIB_FORTRAN

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MAX_3D in LIB_FORTRAN (Line 319, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 361, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 362, file lib_fortran.f90)

Name  Messages
----  --------
MAXVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MAX_2D in LIB_FORTRAN (Line 297, file lib_fortran.f90)
                   GLOB_MAX_3D in LIB_FORTRAN (Line 317, file lib_fortran.f90)
                   GLOB_MAX_3D in LIB_FORTRAN (Line 319, file lib_fortran.f90)
                   GLOB_MAX_2D_A in LIB_FORTRAN (Line 336, file lib_fortran.f90)
                   GLOB_MAX_2D_A in LIB_FORTRAN (Line 337, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 358, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 359, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 361, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 362, file lib_fortran.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MIN_3D in LIB_FORTRAN (Line 237, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 279, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 280, file lib_fortran.f90)

Name  Messages
----  --------
MINVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MIN_2D in LIB_FORTRAN (Line 215, file lib_fortran.f90)
                   GLOB_MIN_3D in LIB_FORTRAN (Line 235, file lib_fortran.f90)
                   GLOB_MIN_3D in LIB_FORTRAN (Line 237, file lib_fortran.f90)
                   GLOB_MIN_2D_A in LIB_FORTRAN (Line 254, file lib_fortran.f90)
                   GLOB_MIN_2D_A in LIB_FORTRAN (Line 255, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 276, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 277, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 279, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 280, file lib_fortran.f90)

Name  Messages
----  --------
MPPBCAST_A_REAL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPGATHER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_A_REAL in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MAX_2D_A in LIB_FORTRAN (Line 338, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 364, file lib_fortran.f90)

Name  Messages
----  --------
MPPMAX_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMAX_REAL in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MAX_2D in LIB_FORTRAN (Line 298, file lib_fortran.f90)
                   GLOB_MAX_3D in LIB_FORTRAN (Line 321, file lib_fortran.f90)

Name  Messages
----  --------
MPPMAX_REAL_MULTIPLE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_A_REAL in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MIN_2D_A in LIB_FORTRAN (Line 256, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 282, file lib_fortran.f90)

Name  Messages
----  --------
MPPMIN_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPMIN_REAL in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_MIN_2D in LIB_FORTRAN (Line 216, file lib_fortran.f90)
                   GLOB_MIN_3D in LIB_FORTRAN (Line 239, file lib_fortran.f90)

Name  Messages
----  --------
MPPRECV in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSCATTER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSEND in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSTOP in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_A_REAL in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_SUM_2D_A in LIB_FORTRAN (Line 134, file lib_fortran.f90)
                   GLOB_SUM_3D_A in LIB_FORTRAN (Line 159, file lib_fortran.f90)

Name  Messages
----  --------
MPPSUM_A_REALDD in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_INT in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSUM_REAL in LIB_MPP
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_SUM_1D in LIB_FORTRAN (Line 78, file lib_fortran.f90)
                   GLOB_SUM_2D in LIB_FORTRAN (Line 93, file lib_fortran.f90)
                   GLOB_SUM_3D in LIB_FORTRAN (Line 117, file lib_fortran.f90)
                   GLOB_SUM_FULL_2D in LIB_FORTRAN (Line 175, file lib_fortran.f90)
                   GLOB_SUM_FULL_3D in LIB_FORTRAN (Line 198, file lib_fortran.f90)

Name  Messages
----  --------
MPPSUM_REALDD in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPPSYNC in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_COMM_FREE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_ICE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_NORTH in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_INI_ZNL in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_E in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LBC_NORTH_ICB in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_9 in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_E in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_ICB in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_2D_MULTIPLE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_3D_GATHER in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_BDY_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_BDY_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_SUM_2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_LNK_SUM_3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MAXLOC2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MAXLOC3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MINLOC2D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPP_MINLOC3D in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MYNODE in LIB_MPP
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NC4INTERFACE
      Defined as:  No definitions.

      Used By:     LIB_FORTRAN  (indirectly)

Name  Messages
----  --------
PAR_KIND
      Defined as:  No definitions.

      Used By:     LIB_FORTRAN  (indirectly)
                   LIB_FORTRAN  (indirectly)
                   LIB_FORTRAN  (indirectly)

Name  Messages
----  --------
PAR_OCE
      Defined as:  No definitions.

      Used By:     LIB_FORTRAN  (indirectly)
                   LIB_FORTRAN  (indirectly)
                   LIB_FORTRAN  (indirectly)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   DDPDD in LIB_FORTRAN (Line 393, file lib_fortran.f90)
                   DDPDD in LIB_FORTRAN (Line 393, file lib_fortran.f90)
                   DDPDD in LIB_FORTRAN (Line 394, file lib_fortran.f90)
                   DDPDD in LIB_FORTRAN (Line 395, file lib_fortran.f90)
                   DDPDD in LIB_FORTRAN (Line 395, file lib_fortran.f90)

Name  Messages
----  --------
SET_NF90_DEF_VAR_CHUNKING in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SET_NF90_DEF_VAR_DEFLATE in NC4INTERFACE
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIGN(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIGN_ARRAY_1D in LIB_FORTRAN
      Defined as:  Function (line 422, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 429, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 431, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 432, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_1D_A in LIB_FORTRAN
      Defined as:  Function (line 466, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 473, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 475, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 476, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_1D_B in LIB_FORTRAN
      Defined as:  Function (line 511, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 518, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 520, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 521, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_2D in LIB_FORTRAN
      Defined as:  Function (line 437, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 444, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 444, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 446, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 447, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_2D_A in LIB_FORTRAN
      Defined as:  Function (line 481, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 488, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 488, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 490, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 491, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_2D_B in LIB_FORTRAN
      Defined as:  Function (line 526, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 533, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 533, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 535, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 536, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_3D in LIB_FORTRAN
      Defined as:  Function (line 451, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 458, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 458, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 458, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 460, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 461, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_3D_A in LIB_FORTRAN
      Defined as:  Function (line 496, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 503, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 503, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 503, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 505, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 506, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_ARRAY_3D_B in LIB_FORTRAN
      Defined as:  Function (line 541, file lib_fortran.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 548, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 548, file lib_fortran.f90)
                   SIZE(Intrinsic) (Line 548, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 550, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 551, file lib_fortran.f90)

Name  Messages
----  --------
SIGN_SCALAR in LIB_FORTRAN
      Defined as:  Function (line 407, file lib_fortran.f90)

      Interface:   None

      Calls:       ABS(Intrinsic) (Line 416, file lib_fortran.f90)
                   ABS(Intrinsic) (Line 417, file lib_fortran.f90)

Name  Messages
----  --------
SIZE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SIGN_ARRAY_1D in LIB_FORTRAN (Line 429, file lib_fortran.f90)
                   SIGN_ARRAY_2D in LIB_FORTRAN (Line 444, file lib_fortran.f90)
                   SIGN_ARRAY_2D in LIB_FORTRAN (Line 444, file lib_fortran.f90)
                   SIGN_ARRAY_3D in LIB_FORTRAN (Line 458, file lib_fortran.f90)
                   SIGN_ARRAY_3D in LIB_FORTRAN (Line 458, file lib_fortran.f90)
                   SIGN_ARRAY_3D in LIB_FORTRAN (Line 458, file lib_fortran.f90)
                   SIGN_ARRAY_1D_A in LIB_FORTRAN (Line 473, file lib_fortran.f90)
                   SIGN_ARRAY_2D_A in LIB_FORTRAN (Line 488, file lib_fortran.f90)
                   SIGN_ARRAY_2D_A in LIB_FORTRAN (Line 488, file lib_fortran.f90)
                   SIGN_ARRAY_3D_A in LIB_FORTRAN (Line 503, file lib_fortran.f90)
                   SIGN_ARRAY_3D_A in LIB_FORTRAN (Line 503, file lib_fortran.f90)
                   SIGN_ARRAY_3D_A in LIB_FORTRAN (Line 503, file lib_fortran.f90)
                   SIGN_ARRAY_1D_B in LIB_FORTRAN (Line 518, file lib_fortran.f90)
                   SIGN_ARRAY_2D_B in LIB_FORTRAN (Line 533, file lib_fortran.f90)
                   SIGN_ARRAY_2D_B in LIB_FORTRAN (Line 533, file lib_fortran.f90)
                   SIGN_ARRAY_3D_B in LIB_FORTRAN (Line 548, file lib_fortran.f90)
                   SIGN_ARRAY_3D_B in LIB_FORTRAN (Line 548, file lib_fortran.f90)
                   SIGN_ARRAY_3D_B in LIB_FORTRAN (Line 548, file lib_fortran.f90)
                   GLOB_SUM_3D in LIB_FORTRAN (Line 111, file lib_fortran.f90)
                   GLOB_SUM_3D_A in LIB_FORTRAN (Line 152, file lib_fortran.f90)
                   GLOB_SUM_FULL_3D in LIB_FORTRAN (Line 192, file lib_fortran.f90)
                   GLOB_MIN_3D in LIB_FORTRAN (Line 233, file lib_fortran.f90)
                   GLOB_MIN_3D_A in LIB_FORTRAN (Line 274, file lib_fortran.f90)
                   GLOB_MAX_3D in LIB_FORTRAN (Line 315, file lib_fortran.f90)
                   GLOB_MAX_3D_A in LIB_FORTRAN (Line 356, file lib_fortran.f90)

Name  Messages
----  --------
SUM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GLOB_SUM_1D in LIB_FORTRAN (Line 77, file lib_fortran.f90)
                   GLOB_SUM_2D in LIB_FORTRAN (Line 92, file lib_fortran.f90)
                   GLOB_SUM_3D in LIB_FORTRAN (Line 115, file lib_fortran.f90)
                   GLOB_SUM_2D_A in LIB_FORTRAN (Line 132, file lib_fortran.f90)
                   GLOB_SUM_2D_A in LIB_FORTRAN (Line 133, file lib_fortran.f90)
                   GLOB_SUM_3D_A in LIB_FORTRAN (Line 156, file lib_fortran.f90)
                   GLOB_SUM_3D_A in LIB_FORTRAN (Line 157, file lib_fortran.f90)
                   GLOB_SUM_FULL_2D in LIB_FORTRAN (Line 174, file lib_fortran.f90)
                   GLOB_SUM_FULL_3D in LIB_FORTRAN (Line 196, file lib_fortran.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
